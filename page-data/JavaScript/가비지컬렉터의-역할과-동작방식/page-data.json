{"componentChunkName":"component---src-templates-blog-post-js","path":"/JavaScript/가비지컬렉터의-역할과-동작방식/","result":{"data":{"site":{"siteMetadata":{"title":"Yeongjae-Shin.io","author":"Yeongjae-Shin","siteUrl":"https://yeongjae-shin.github.io","comment":{"disqusShortName":"","utterances":"Yeongjae-Shin/Yeongjae-Shin.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"43ef8456-2392-54c4-a2c0-033f247d007f","excerpt":"TL;DR 가비지컬렉터의 역할은 자바스크립트 엔진이 메모리 할당을 모니터링하고 할당된 메모리의 블록이 더 이상 필요하지 않은 시점을 확인하여 회수하는 것이다. 가비지컬렉터는 알고리즘과  알고리즘에 따라 동작한다. 참조-세기(Reference-counting…","html":"<h1 id=\"tldr\" style=\"position:relative;\"><a href=\"#tldr\" aria-label=\"tldr permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TL;DR</h1>\n<p>가비지컬렉터의 역할은 자바스크립트 엔진이 메모리 할당을 모니터링하고 할당된 메모리의 블록이 더 이상 필요하지 않은 시점을 확인하여 회수하는 것이다.</p>\n<p>가비지컬렉터는 <code class=\"language-text\">Reference-counting</code>알고리즘과 <code class=\"language-text\">Mark-and-sweep</code> 알고리즘에 따라 동작한다.</p>\n<ol>\n<li>\n<p><strong>참조-세기(Reference-counting)</strong></p>\n<ul>\n<li>참조-세기는 더 이상 필요없는 오브젝트를 어떤 다른 오브젝트도 참조하지 않는 오브젝트라고 정의한다. 이 오브젝트를 <code class=\"language-text\">가비지</code>라고 부르며, 이를 참조하는 다른 오브젝트가 하나도 없는 경우 수집이 가능하다.</li>\n<li>이 알고리즘은 순환 참조의 문제점을 가지고 있다.</li>\n</ul>\n</li>\n<li>\n<p><strong>표시하고-쓸기(Mark-and-sweep)</strong></p>\n<ul>\n<li>Mark: 객체가 생성될 때마다 <code class=\"language-text\">mark bit</code>가 <code class=\"language-text\">0(false)</code>으로 설정된다. <code class=\"language-text\">mark</code> 단계에서 접근 가능한 객체의 <code class=\"language-text\">mark bit</code>가 <code class=\"language-text\">1(true)</code>로 설정된다.</li>\n<li>Sweep: <code class=\"language-text\">mark</code> 단계 후 <code class=\"language-text\">mark bit</code>가 여전히 <code class=\"language-text\">0</code>으로 설정된 객체들은 도달할 수 없는 객체이므로 가비지컬렉터가 수집해 메모리에서 해제된다.</li>\n<li>이 알고리즘은 <code class=\"language-text\">참조-세기</code>알고리즘의 문제점을 보완할 수 있어 2012년 이후 대부분의 브라우저에서 채택하고 있다.</li>\n</ul>\n</li>\n</ol>\n<p>가비지컬렉션은 자동으로 실행되며 강제로 멈추거나 실행시킬 수 없다.</p>\n<h1 id=\"자바스크립트의-메모리-관리\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B4%80%EB%A6%AC\" aria-label=\"자바스크립트의 메모리 관리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트의 메모리 관리</h1>\n<p>C 언어 같은 저수준(로우레벨) 언어에서는 메모리 관리를 위해 <code class=\"language-text\">malloc()</code>과 <code class=\"language-text\">free()</code>를 사용한다고 합니다. 반면에, 자바스크립트는 눈에 보이지 않는 곳에서 메모리 관리를 수행합니다.\n객체가 생성되었을 때 자동으로 메모리를 할당하고 쓸모 없어졌을 때 자동으로 해제합니다.(<em>가비지 컬렉션</em>)</p>\n<p>원시값, 객체, 함수 등 우리가 만드는 모든 것은 메모리를 차지합니다. 그럼 쓸모 없어지게 된 것들은 자동으로 해제 된다는데 어떤 기준에 의해 해제되는 것일까요?</p>\n<h1 id=\"가비지컬렉션\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EB%B9%84%EC%A7%80%EC%BB%AC%EB%A0%89%EC%85%98\" aria-label=\"가비지컬렉션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가비지컬렉션</h1>\n<p>자바스크립트의 가비지컬렉션 기준을 알아보기 전에 메모리의 생존주기와 자바스크립트에서의 메모리 할당 대해 알아보겠습니다.</p>\n<h2 id=\"메모리의-생존주기\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EB%AA%A8%EB%A6%AC%EC%9D%98-%EC%83%9D%EC%A1%B4%EC%A3%BC%EA%B8%B0\" aria-label=\"메모리의 생존주기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메모리의 생존주기</h2>\n<p>메모리의 생존주기는 저수준 언어, 고수준 언어와 관계없이 비슷합니다.</p>\n<blockquote>\n<ol>\n<li>필요할 때 할당한다.</li>\n<li>사용한다. (읽기, 쓰기)</li>\n<li>필요없어지면 해제한다.</li>\n</ol>\n</blockquote>\n<p>2번은 모든 언어에서 명시적으로 사용되지만 1번과 3번은 저수준 언어에서는 명시적이며, 자바스크립트와 같은 고수준(하이레벨) 언어에서는 암묵적으로 작동합니다.</p>\n<h2 id=\"자바스크립트에서의-메모리-할당\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%97%90%EC%84%9C%EC%9D%98-%EB%A9%94%EB%AA%A8%EB%A6%AC-%ED%95%A0%EB%8B%B9\" aria-label=\"자바스크립트에서의 메모리 할당 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트에서의 메모리 할당</h2>\n<h3 id=\"값-초기화\" style=\"position:relative;\"><a href=\"#%EA%B0%92-%EC%B4%88%EA%B8%B0%ED%99%94\" aria-label=\"값 초기화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>값 초기화</h3>\n<p>프로그래머가 일일이 메모리를 할당 하지 않도록 하기 위해서 자바스크립트는 값 초기화를 할 때 자동으로 메모리를 할당합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정수를 담기 위한 메모리 할당</span>\n<span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'123'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 문자열을 담기 위한 메모리 할당</span>\n\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span>\n  b<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 객체와 객체에 포함된 값들을 담기 위한 메모리 할당</span>\n\n<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'123'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 배열과 배열에 담긴 값들을 위한 메모리 할당</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// 함수를 위한 할당(함수는 호출 가능한 객체입니다)</span>\n\n<span class=\"token comment\">// 함수표현식 또한 객체를 담기위한 메모리를 할당합니다</span>\nsomeElement<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  someElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"함수-호출을-통한-할당\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98-%ED%98%B8%EC%B6%9C%EC%9D%84-%ED%86%B5%ED%95%9C-%ED%95%A0%EB%8B%B9\" aria-label=\"함수 호출을 통한 할당 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 호출을 통한 할당</h3>\n<p>함수 호출의 결과 메모리 할당이 일어나기도 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Date 객체를 위해 메모리 할당</span>\n<span class=\"token keyword\">var</span> el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// DOM Element를 위해 메모리 할당</span></code></pre></div>\n<p>메소드가 새로운 값이나 객체를 할당하기도 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'123'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> str2 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// str2 새로운 문자열</span>\n<span class=\"token comment\">// 자바스크립트에서 문자열은 immutable 값이기 때문에</span>\n<span class=\"token comment\">// 메모리를 새로 할당하지 않고 단순히 [0, 2] 이라는 범위만 저장합니다.</span>\n\n<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'456'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'789'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'101112'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> arr3 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// arr과 arr2를 합친 4개의 원소를 가진 새로운 배열</span></code></pre></div>\n<h1 id=\"자바스크립트의-가비지컬렉션-기준\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%EA%B0%80%EB%B9%84%EC%A7%80%EC%BB%AC%EB%A0%89%EC%85%98-%EA%B8%B0%EC%A4%80\" aria-label=\"자바스크립트의 가비지컬렉션 기준 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트의 가비지컬렉션 기준</h1>\n<p>쉽게 말하면 어떤 값들이 더 이상 도달이 불가능한 경우 가비지컬렉션의 대상이 됩니다.</p>\n<p>자바스크립트는 <code class=\"language-text\">도달 가능성(reachability)</code>이라는 개념을 사용해 메모리 관리를 수행합니다.</p>\n<p>도달 가능한 값은 쉽게 말해 어떻게든 접근하거나 사용할 수 있는 값을 의미합니다. <strong>도달 가능한 값은 메모리에서 삭제되지 않습니다.</strong></p>\n<p>아래의 값들은 태생부터 도달 가능하기 때문에 이유 없이 삭제되지 않습니다.</p>\n<ul>\n<li>현재 함수의 지역 변수와 매개변수</li>\n<li>중첩 함수의 체인에 있는 함수에서 사용되는 변수와 매개변수</li>\n<li>전역 변수</li>\n</ul>\n<p>이런 값은 <code class=\"language-text\">루트(root)</code>라고 부릅니다.\n<code class=\"language-text\">루트</code>가 참조하는 값이나 체이닝으로 루트에서 참조할 수 있는 값은 도달 가능한 값이 됩니다.</p>\n<p>전역 변수에 객체가 저장되어있다고 가정해보면, 이 객체의 프로퍼티가 또 다른 객체를 참조하고 있다면, 프로퍼티가 참조하는 객체는 도달 가능한 값이 됩니다.\n따라서 이 객체가 참조하는 다른 모든 것들도 도달 가능하다고 여겨집니다.</p>\n<h1 id=\"내부-알고리즘\" style=\"position:relative;\"><a href=\"#%EB%82%B4%EB%B6%80-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"내부 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>내부 알고리즘</h1>\n<h2 id=\"1-참조-세기reference-counting-알고리즘\" style=\"position:relative;\"><a href=\"#1-%EC%B0%B8%EC%A1%B0-%EC%84%B8%EA%B8%B0reference-counting-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"1 참조 세기reference counting 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 참조-세기(Reference-counting) 알고리즘</h2>\n<h3 id=\"간단한-예시\" style=\"position:relative;\"><a href=\"#%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%98%88%EC%8B%9C\" aria-label=\"간단한 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>간단한 예시</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// user엔 객체 참조 값이 저장됩니다.</span>\n<span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div style=\"text-align: center;\"><img src=\"https://ko.javascript.info/article/garbage-collection/memory-user-john.svg\"></div>\n<p>이 그림에서 화살표는 객체 참조를 나타냅니다. 전역 변수 <code class=\"language-text\">user</code>는 <code class=\"language-text\">{ name: 'John' }</code>이라는 객체를 참조합니다.\n<code class=\"language-text\">user</code>의 값을 다른 값으로 덮어쓰면 참조가 사라집니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">user <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div style=\"text-align: center;\"><img src=\"https://ko.javascript.info/article/garbage-collection/memory-user-john-lost.svg\"></div>\n<p>John은 도달할 수 없는 상태가 되었기 때문에 가비지 컬렉터(이하 GC)가 John에 저장된 데이터를 삭제하고, John을 메모리상에서 삭제합니다.</p>\n<h3 id=\"참조-두-개\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0-%EB%91%90-%EA%B0%9C\" aria-label=\"참조 두 개 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조 두 개</h3>\n<p>참조를 <code class=\"language-text\">user</code>에서 <code class=\"language-text\">admin</code>으로 복사했다고 가정해봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// user엔 객체 참조 값이 저장됩니다.</span>\n<span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> admin <span class=\"token operator\">=</span> user<span class=\"token punctuation\">;</span></code></pre></div>\n<div style=\"text-align: center;\"><img src=\"https://ko.javascript.info/article/garbage-collection/memory-user-john-admin.svg\"></div>\n<p>그리고 위에서 한 것 처럼 <code class=\"language-text\">user</code>의 값을 다른 값으로 덮어써 봅니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">user <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>전역 변수 <code class=\"language-text\">admin</code>을 통하면 여전히 객체 John에 접근할 수 있기 때문에 John은 메모리상에서 삭제되지 않습니다. 이 상태에서 <code class=\"language-text\">admin</code>을 다른 값으로 덮어쓰면 John은 메모리상에서 삭제될 수 있습니다.</p>\n<h3 id=\"연결된-객체\" style=\"position:relative;\"><a href=\"#%EC%97%B0%EA%B2%B0%EB%90%9C-%EA%B0%9D%EC%B2%B4\" aria-label=\"연결된 객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>연결된 객체</h3>\n<p>조금 복잡한 예시가 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">marry</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">man<span class=\"token punctuation\">,</span> woman</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  woman<span class=\"token punctuation\">.</span>husband <span class=\"token operator\">=</span> man<span class=\"token punctuation\">;</span>\n  man<span class=\"token punctuation\">.</span>wife <span class=\"token operator\">=</span> woman<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    father<span class=\"token operator\">:</span> man<span class=\"token punctuation\">,</span>\n    mother<span class=\"token operator\">:</span> woman<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> family <span class=\"token operator\">=</span> <span class=\"token function\">marry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'Ann'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>메모리 구조는 아래와 같이 나타낼 수 있습니다.</p>\n<div style=\"text-align: center;\"><img src=\"https://ko.javascript.info/article/garbage-collection/family.svg\"></div>\n<p>위 예시의 함수는 호출이되고 끝나서 더 이상 필요한 값이 아닌데도 파라미터로 받은 두 객체를 서로 참조하게 되면서(순환 참조) GC는 이 값들에 대한 메모리를 삭제하지 않아서 메모리에 계속 남아있게 됩니다.\n<strong>순환참조는 메모리 누수를 일으키는 주된 요인이라고 할 수 있습니다.</strong></p>\n<p>참조 두 개를 지워보도록 하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">delete</span> family<span class=\"token punctuation\">.</span>father<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span> family<span class=\"token punctuation\">.</span>mother<span class=\"token punctuation\">.</span>husband<span class=\"token punctuation\">;</span></code></pre></div>\n<div style=\"text-align: center;\"><img src=\"https://ko.javascript.info/article/garbage-collection/family-delete-refs.svg\"></div>\n<p>삭제한 두 개의 참조 중 하나만 지웠다면, 모든 객체가 여전히 도달 가능한 상태였지만 두 개를 지우면 John으로 들어오는 참조는 모두 사라져\nJohn은 도달 가능한 상태에서 벗어나 GC에 의해 메모리상에서 삭제됩니다.</p>\n<div style=\"text-align: center;\"><img src=\"https://ko.javascript.info/article/garbage-collection/family-no-father.svg\"></div>\n<h3 id=\"도달할-수-없는-섬\" style=\"position:relative;\"><a href=\"#%EB%8F%84%EB%8B%AC%ED%95%A0-%EC%88%98-%EC%97%86%EB%8A%94-%EC%84%AC\" aria-label=\"도달할 수 없는 섬 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>도달할 수 없는 섬</h3>\n<p>객체들이 연결되어 섬 같은 구조를 만드는데, 이 섬에 도달할 수 없으면 섬을 구성하는 객체 전부 메모리상에서 삭제됩니다.\n<code class=\"language-text\">family</code>가 아무것도 참조하지 않도록 만들어 봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">family <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div style=\"text-align: center;\"><img src=\"https://ko.javascript.info/article/garbage-collection/family-no-family.svg\"></div>\n<p>John과 Ann은 여전히 서로를 참조하고 있고, 두 객체 모두 외부에서 들어오는 참조를 가지고 있습니다.\n하지만 <code class=\"language-text\">fmaily</code>객체와 루트의 연결이 사라지면 루트 객체를 참조하는 것이 아무것도 없게 됩니다. 섬 전체가 도달할 수 없는 상태가 되어\n섬을 구성하는 객체 모두가 메모리상에서 삭제됩니다.</p>\n<p><strong>도달할 수 없는 섬</strong> 예제는 도달 가능성이라는 개념이 얼마나 중요한지 보여줍니다.</p>\n<h2 id=\"2-표시하고-쓸기mark-and-sweep-알고리즘\" style=\"position:relative;\"><a href=\"#2-%ED%91%9C%EC%8B%9C%ED%95%98%EA%B3%A0-%EC%93%B8%EA%B8%B0mark-and-sweep-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"2 표시하고 쓸기mark and sweep 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 표시하고-쓸기(Mark-and-sweep) 알고리즘</h2>\n<p><code class=\"language-text\">Mark-and-sweep</code>알고리즘은 다음 단계를 거쳐 수행됩니다.</p>\n<ol>\n<li>GC는 루트 정보를 수집하고 이를 <code class=\"language-text\">mark(표시)</code>합니다.</li>\n<li>루트가 참조하고 있는 모든 객체를 방문하고 이것들을 <code class=\"language-text\">mark</code>합니다.</li>\n<li><code class=\"language-text\">mark</code>된 모든 객체에 방문하고 그 객체들이 참조하는 객체도 <code class=\"language-text\">mark</code>합니다. 한번 방문한 객체는 전부 <code class=\"language-text\">mark</code>하기 때문에 같은 객체를 다시 방문하지는 않습니다.</li>\n<li>루트에서 도달 가능한 모든 객체를 방문할 때까지 위의 과정을 반복합니다.</li>\n<li><code class=\"language-text\">mark</code>되지 않은 모든 객체를 메모리상에서 삭제합니다.</li>\n</ol>\n<div style=\"text-align: center;\"><img src=\"https://blog.kakaocdn.net/dn/qpGfK/btq5vOgrm2f/UHlxleW4Yg1y5GbOgdbk70/img.png\"></div>\n<h3 id=\"간단한-예시-1\" style=\"position:relative;\"><a href=\"#%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%98%88%EC%8B%9C-1\" aria-label=\"간단한 예시 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>간단한 예시</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">couple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> John <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> Ann <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// John.girlFriend는 Ann을 참조한다. </span>\n  John<span class=\"token punctuation\">.</span>girlFriend <span class=\"token operator\">=</span> Ann<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Ann.boyFriend는 John을 참조한다.</span>\n  Ann<span class=\"token punctuation\">.</span>boyFriend <span class=\"token operator\">=</span> John<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token string\">'순환참조'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">couple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 예시에서 <code class=\"language-text\">couple()</code>이라는 함수가 호출된 후 <code class=\"language-text\">'순환참조'</code>가 return 되고 함수가 끝난 후에는 더 이상 root에서 John과 Ann에 도달할 수 없기 때문에\n해당 값들은 GC에 의해서 메모리상에서 삭제됩니다.</p>\n<p>2012년부터 모던 브라우저들은 대부분 GC에 <code class=\"language-text\">Mark-and-sweep</code>알고리즘을 사용합니다.</p>\n<hr>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Memory_Management\">https://developer.mozilla.org/ko/docs/Web/JavaScript/Memory_Management</a></li>\n<li><a href=\"https://javascript.info/garbage-collection\">https://javascript.info/garbage-collection</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Garbage_collection_(computer_science\">https://en.wikipedia.org/wiki/Garbage_collection_(computer_science</a>)</li>\n<li><a href=\"https://www.geeksforgeeks.org/garbage-collection-in-javascript/\">https://www.geeksforgeeks.org/garbage-collection-in-javascript/</a></li>\n</ul>","frontmatter":{"title":"가비지컬렉터의 역할과 동작방식","date":"October 09, 2021"}}},"pageContext":{"slug":"/JavaScript/가비지컬렉터의-역할과-동작방식/","previous":{"fields":{"slug":"/기타/ncp(naver-cloud-platform)을-활용한-카카오-알림톡-보내기/"},"frontmatter":{"title":"NCP(Naver Cloud Platform)을 활용한 카카오 알림톡 보내기"}},"next":{"fields":{"slug":"/CS/프로세스와-쓰레드에-대해/"},"frontmatter":{"title":"프로세스와 쓰레드에 대해"}}}},"staticQueryHashes":["2486386679","3128451518"]}