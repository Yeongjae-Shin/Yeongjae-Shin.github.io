{"componentChunkName":"component---src-templates-blog-post-js","path":"/JavaScript/실행-컨텍스트-그리고-이벤트루프/","result":{"data":{"site":{"siteMetadata":{"title":"Yeongjae-Shin.io","author":"Yeongjae-Shin","siteUrl":"https://yeongjae-shin.github.io","comment":{"disqusShortName":"","utterances":"Yeongjae-Shin/Yeongjae-Shin.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"3aa03982-3b44-53ee-8ae3-37546120c4dd","excerpt":"실행 컨텍스트 (Execution Context) 정의 코드의 실행환경에 대한 여러가지 정보를 담고 있는 개념 으로, 간단히 말하자면 자바스크립트 엔진에 의해 만들어지고 사용되는 코드 정보를 담은 객체의 집합이라고 할 수 있다. 종류 자바스크립트의 코드는…","html":"<h1 id=\"실행-컨텍스트-execution-context\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-execution-context\" aria-label=\"실행 컨텍스트 execution context permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행 컨텍스트 (Execution Context)</h1>\n<h2 id=\"정의\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%9D%98\" aria-label=\"정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정의</h2>\n<p><strong>코드의 실행환경에 대한 여러가지 정보를 담고 있는 개념</strong> 으로, 간단히 말하자면 자바스크립트 엔진에 의해 만들어지고 사용되는 코드 정보를 담은 객체의 집합이라고 할 수 있다.</p>\n<br>\n<h2 id=\"종류\" style=\"position:relative;\"><a href=\"#%EC%A2%85%EB%A5%98\" aria-label=\"종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>종류</h2>\n<p>자바스크립트의 코드는 3가지 종류로 이루어지는데, 글로벌 스코프에서 실행하는 글로벌 코드, 함수 스코프에서 실행하는 함수 코드 그리고 여기서 다루진 않지만 <code class=\"language-text\">eval()</code> 로 실행되는 코드가 있다. 이 각각의 코드는 자신만의 실행 컨텍스트를 생성한다.</p>\n<p>엔진이 스크립트 파일을 실행하기 전에 <strong>글로벌 실행 컨텍스트(Global Execution Context, GEC)</strong> 가 생성되고, 함수를 호출할 때마다 <strong>함수 실행 컨텍스트(Function Execution Context, FEC)</strong> 가 생성된다. 주의할 점은, 글로벌의 경우 실행 이전에 생성되지만 함수의 경우 호출할 때 생성된다는 점이다.</p>\n<br>\n<h2 id=\"실행-컨텍스트-스택-execution-context-stack\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-%EC%8A%A4%ED%83%9D-execution-context-stack\" aria-label=\"실행 컨텍스트 스택 execution context stack permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행 컨텍스트 스택 (Execution Context Stack)</h2>\n<p>실행 컨텍스트가 생성되면 흔히 콜 스택(Call Stack)이라고도 불리는 실행 컨텍스트 스택에 쌓이게 된다. GEC는 코드를 실행하기 전에 쌓이고 모든 코드를 실행하면 제거된다. FEC는 호출할 때 쌓이고 호출이 끝나면 제거된다. 예시 코드를 통해 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'함수 실행 컨텍스트'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'글로벌 실행 컨텍스트'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>제일 처음, 코드를 실행하기 전에 GEC가 쌓이고 코드를 실행하면서 콘솔에 “글로벌 실행 컨텍스트” 가 출력된다. 그 다음 <code class=\"language-text\">func()</code> 을 호출하고 그에 대한 FEC가 만들어져 쌓이고 FEC를 실행하며 콘솔에 “함수 실행 컨텍스트” 가 출력된다. 이후 <code class=\"language-text\">func()</code> 이 종료되고 FEC가 스택에서 제거된 후, 모든 코드의 실행이 끝나면서 GEC가 스택에서 제거된다. <a href=\"https://miro.medium.com/max/1100/1*dUl6qPEaDJJTXWythQsEtQ.gif\">GIF</a> 를 통해서 더 쉽게 이해할 수 있으니 꼭 보자.</p>\n<br>\n<h2 id=\"구성요소\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C\" aria-label=\"구성요소 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구성요소</h2>\n<p>실행 컨텍스트는 다음과 같은 구성요소를 갖는다.</p>\n<ul>\n<li>Lexical Environment</li>\n<li>Variable Environment</li>\n<li>this 바인딩</li>\n</ul>\n<h3 id=\"lexical-environment\" style=\"position:relative;\"><a href=\"#lexical-environment\" aria-label=\"lexical environment permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lexical Environment</h3>\n<p>Lexical Environment는 <strong>변수 및 함수 등의 식별자(Identifier) 및 외부 참조에 관한 정보를 가지고 있는 컴포넌트</strong> 이다. 이 컴포넌트는 2개의 구성요소를 갖는다.</p>\n<ul>\n<li><strong>Environment Record</strong></li>\n<li><strong>outer 참조</strong></li>\n</ul>\n<p>Environment Record가 식별자에 관한 정보를 가지고 있으며 outer 참조는 외부 Lexical Environment를 참조하는 포인터이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같은 코드가 있을 때는 아래와 같이 Lexical Environment가 형성된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">globalEnvironment = {\n\tenvironmentRecord = { x: 10 },\n\touter: null\n}\nfooEnvironment = {\n\tenvironmentRecord = { y: 20 },\n\touter: globalEnvironment\n}</code></pre></div>\n<p>따라서, <code class=\"language-text\">foo()</code> 에서 <code class=\"language-text\">x</code> 를 참조할 때는 현재 Environment Record를 찾아보고 없기 때문에 outer 참조를 사용하여 외부의 Lexical Environment에 속해 있는 Environment Record를 찾아보는 방식이다.</p>\n<h3 id=\"variable-environment\" style=\"position:relative;\"><a href=\"#variable-environment\" aria-label=\"variable environment permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Variable Environment</h3>\n<p>Variable Environment는 Lexical Environment와 동일한 성격을 띠지만 <strong><code class=\"language-text\">var</code> 로 선언된 변수만 저장한다는 점에서 다르다.</strong> 즉, Lexical Environment는 <code class=\"language-text\">var</code> 로 선언된 변수를 제외하고 나머지(<code class=\"language-text\">let</code> 으로 선언되었거나 함수 선언문)를 저장한다. ( 코드로 확인해 볼려면 <a href=\"https://stackoverflow.com/a/45788048/11789111\">여기</a> 를 보자 )</p>\n<h3 id=\"this-바인딩\" style=\"position:relative;\"><a href=\"#this-%EB%B0%94%EC%9D%B8%EB%94%A9\" aria-label=\"this 바인딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>this 바인딩</h3>\n<p>this의 바인딩은 실행 컨텍스트가 생성될 때마다 this 객체에 어떻게 바인딩이 되는지를 나타낸 것이다.  (ES6부터 this의 바인딩이 LexicalEnvironment 안에 있는 EnvironmentRecord 안에서 일어난다는 사실을 기억해두도록 하자. 그렇게 중요하진 않으니 알고만 있자.)</p>\n<ul>\n<li>\n<p><strong>GEC의 경우</strong></p>\n<ul>\n<li>strict mode라면 <code class=\"language-text\">undefined</code> 로 바인딩된다.</li>\n<li>아니라면 글로벌 객체로 바인딩된다. (브라우저에선 window, 노드에선 global)</li>\n</ul>\n</li>\n<li>\n<p><strong>FEC의 경우</strong></p>\n<ul>\n<li>해당 함수가 어떻게 호출되었는지에 따라 바인딩된다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"과정\" style=\"position:relative;\"><a href=\"#%EA%B3%BC%EC%A0%95\" aria-label=\"과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>과정</h2>\n<p>EC는 2가지 과정을 거친다.</p>\n<ol>\n<li><strong>Creation Phase (생성단계)</strong></li>\n<li><strong>Execution Phase (실행단계)</strong></li>\n</ol>\n<h3 id=\"생성단계\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EC%84%B1%EB%8B%A8%EA%B3%84\" aria-label=\"생성단계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생성단계</h3>\n<p>생성단계는 다시 3가지 단계로 이루어진다.</p>\n<ol>\n<li>Lexical Environment 생성</li>\n<li>Variable Environment 생성</li>\n<li>this 바인딩</li>\n</ol>\n<p>여기서 <strong>주의할 점은 값이 변수에 매핑되지 않는다는 것</strong> 이다. <code class=\"language-text\">var</code> 의 경우는 <code class=\"language-text\">undefined</code> 로 초기화되고 <code class=\"language-text\">let</code> 이나 <code class=\"language-text\">const</code> 는 아무 값도 가지지 않는다.</p>\n<h3 id=\"실행단계\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89%EB%8B%A8%EA%B3%84\" aria-label=\"실행단계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행단계</h3>\n<p>이제 코드를 실행하면서 <strong>변수에 값을 매핑시킨다.</strong> 예시를 통해 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> t <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> num <span class=\"token operator\">+</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> r <span class=\"token operator\">=</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><strong>GEC의 생성 단계</strong></li>\n</ul>\n<p>여기서 생성이 될 때 실행 컨텍스트 스택에 쌓인다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">GEC {\n\tThisBinding: window,\n\tLexicalEnvironment: {\n\t\tEnvironmentRecord: {\n\t\t\tb: &lt;uninitialized>,\n\t\t\tfunc: func(){...}\n\t\t},\n\t\touter 참조: null\n\t},\n\tVariableEnvironment: {\t\n\t\tEnvironmentRecord: {\n\t\t\ta: undefined,\n\t\t\tr: undefined\n\t\t},\n\t\touter 참조: null\n\t}\n}</code></pre></div>\n<ul>\n<li><strong>GEC의 실행 단계</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">GEC {\n\tThisBinding: window,\n\tLexicalEnvironment: {\n\t\tEnvironmentRecord: {\n\t\t\tb: 4,\n\t\t\tfunc: func(){...}\n\t\t},\n\t\touter 참조: null\n\t},\n\tVariableEnvironment: {\n\t\tEnvironmentRecord: {\n\t\t\ta: 3,\n\t\t\tr: undefined\n\t\t},\n\t\touter 참조: null\n\t}\n}</code></pre></div>\n<p>이제 <code class=\"language-text\">func()</code> 을 호출하고 FEC를 생성한다.</p>\n<ul>\n<li><strong>FEC의 생성 단계</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">FEC {\n\tThisBinding: window,\n\tLexicalEnvironment: {\n\t\tEnvironmentRecord: {\n\t\t\targuments: { num: 4, length: 1 },\n\t\t},\n\t\touter: GEC의 LexicalEnvironment\n\t},\n\tVariableEnvironment: {\n\t\tEnvironmentRecord: {\n\t\t\tt: undefined\n\t\t},\n\t\touter: GEC의 LexicalEnvironment\n\t}\n}</code></pre></div>\n<ul>\n<li><strong>FEC의 실행 단계</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">FEC {\n\tThisBinding: window,\n\tLexicalEnvironment: {\n\t\tEnvironmentRecord: {\n\t\t\targuments: { num: 4, length: 1 },\n\t\t},\n\t\touter: GEC의 LexicalEnvironment\n\t},\n\tVariableEnvironment: {\n\t\tEnvironmentRecord: {\n\t\t\tt: 9\n\t\t},\n\t\touter: GEC의 LexicalEnvironment\n\t}\n}</code></pre></div>\n<p>FEC가 스택에서 제거 되고 GEC의 <code class=\"language-text\">r</code> 이 20으로 초기화된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">GEC {\n\tThisBinding: window,\n\tLexicalEnvironment: {\n\t\tEnvironmentRecord: {\n\t\t\tb: 4,\n\t\t\tfunc: func(){...}\n\t\t},\n\t\touter 참조: null\n\t},\n\tVariableEnvironment: {\n\t\tEnvironmentRecord: {\n\t\t\ta: 3,\n\t\t\tr: 20\n\t\t},\n\t\touter 참조: null\n\t}\n}</code></pre></div>\n<p>모든 코드를 실행하고 GEC가 스택에서 제거된 뒤 프로그램이 종료된다. <a href=\"https://miro.medium.com/max/1100/1*SBP65hdVDW5j0LuVryTiXw.gif\">GIF</a> 를 보면 더 확실히 이해할 수 있으니 꼭 보자.</p>\n<hr>\n<h1 id=\"이벤트-루프-event-loop\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%A3%A8%ED%94%84-event-loop\" aria-label=\"이벤트 루프 event loop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이벤트 루프 (Event loop)</h1>\n<p>자바스크립트는 <strong>단일 스레드(Single-threaded) 기반 언어</strong> 로, 자바스크립트 엔진이 단일 콜 스택을 갖는다. 이 말은 요청이 동기적으로 처리된다는 것을 의미한다. 그렇다면 비동기 요청은 어떻게 처리될 수 있을까? 그것은 바로 자바스크립트를 실행하는 환경인 브라우저나 Node.js가 담당한다. <strong>여기서 자바스크립트 엔진과 그 실행 환경을 상호 연동시켜주는 장치가 바로 이벤트 루프이다.</strong> 따라서, 이벤트 루프는 자바스크립트 엔진에 있지 않고 그 환경에 속한다.</p>\n<br>\n<h2 id=\"태스크-큐task-queue와-마이크로태스크-큐microtask-queue\" style=\"position:relative;\"><a href=\"#%ED%83%9C%EC%8A%A4%ED%81%AC-%ED%81%90task-queue%EC%99%80-%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%ED%83%9C%EC%8A%A4%ED%81%AC-%ED%81%90microtask-queue\" aria-label=\"태스크 큐task queue와 마이크로태스크 큐microtask queue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>태스크 큐(Task queue)와 마이크로태스크 큐(Microtask queue)</h2>\n<p>자바스크립트의 실행 환경은 2가지 큐를 가지고 있으며 <strong>각각 스크립트 실행, 이벤트 핸들러, 콜백함수 등의 태스크(Task) 담기는 공간이다.</strong> 태스크가 콜백함수라면 그 종류에 따라 다른 큐에 담기며 대표적인 예로는 다음과 같은 것들이 있다.</p>\n<ul>\n<li>\n<p><strong>태스크 큐</strong></p>\n<ul>\n<li><code class=\"language-text\">setTimeout()</code> , <code class=\"language-text\">setInterval()</code> , UI 렌더링, <code class=\"language-text\">requestAnimationFrame()</code></li>\n</ul>\n</li>\n<li>\n<p><strong>마이크로태스크 큐</strong></p>\n<ul>\n<li>Promise, MutationObserver</li>\n</ul>\n</li>\n</ul>\n<p>이벤트 루프는 2개의 큐를 감시하고 있다가 콜 스택이 비게 되면, 콜백함수를 꺼내와서 실행한다. 이 때 <strong>마이크로태스크 큐의 콜백함수가 우선순위를 가지기 때문에</strong> 마이크로태스크 큐의 콜백함수를 전부 실행하고 나서 태스크 큐의 콜백함수들을 실행한다. (단, UI 렌더링이 태스크 큐에 속하기 때문에 마이크로태스크 큐의 태스크가 많으면 렌더링이 지연될 수 있다.)</p>\n<br>\n<h2 id=\"예시를-통한-동작방식의-이해\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C%EB%A5%BC-%ED%86%B5%ED%95%9C-%EB%8F%99%EC%9E%91%EB%B0%A9%EC%8B%9D%EC%9D%98-%EC%9D%B4%ED%95%B4\" aria-label=\"예시를 통한 동작방식의 이해 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시를 통한 동작방식의 이해</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'시작'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'첫번째 setTimeout'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'첫번째 promise, 첫번째 then'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'첫번째 promise, 두번째 then'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'두번째 setTimeout'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'두번째 promise, 첫번째 then'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'두번째 promise, 두번째 then'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'끝'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>결과는 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">시작\n끝\n첫번째 promise, 첫번째 then\n두번째 promise, 첫번째 then\n첫번째 promise, 두번째 then\n두번째 promise, 두번째 then\n첫번째 setTimeout\n두번째 setTimeout</code></pre></div>\n<p>처음 스크립트가 로드될 때 <strong>“스크립트 실행”</strong> 이라는 태스크가 먼저 태스크 큐에 들어간다. 그리고 나서 이벤트 루프가 태스크 큐에서 해당 태스크를 가져와 콜 스택을 실행하는 것이다. 즉, 콜 스택에는 이미 GEC(Global Execution Context)가 생성되어 있는 상태에서 “스크립트 실행” 이라는 태스크를 실행하게 되면 그제서야 GEC에 속한 코드가 실행되는 방식이다.</p>\n<p>그럼 하나하나 어떻게 동작하는지 그림으로 살펴보자.</p>\n<img src=\"https://raw.githubusercontent.com/baeharam/Must-Know-About-Frontend/main/images/javascript/task0.png\">\n<p>제일 먼저, “스크립트 실행” 태스크가 태스크 큐에 들어가게 된다.</p>\n<img src=\"https://raw.githubusercontent.com/baeharam/Must-Know-About-Frontend/main/images/javascript/task1.png\">\n<p>이후, 이벤트 루프가 그 태스크를 가져와서 로드된 스크립트를 실행시킨다. 따라서 맨 처음에 <code class=\"language-text\">console.log</code> 가 실행된다.</p>\n<img src=\"https://github.com/baeharam/Must-Know-About-Frontend/blob/main/images/javascript/task2.png?raw=true\">\n<p>그 다음, <code class=\"language-text\">setTimeout()</code> 이 콜 스택으로 가고 브라우저가 이를 받아서 타이머를 동작시킨다.</p>\n<img src=\"https://github.com/baeharam/Must-Know-About-Frontend/blob/main/images/javascript/task3.png?raw=true\">\n<p>타이머가 끝나면 <code class=\"language-text\">setTimeout()</code> 의 콜백함수를 태스크 큐에 넣는다.</p>\n<img src=\"https://github.com/baeharam/Must-Know-About-Frontend/blob/main/images/javascript/task4.png?raw=true\">\n<p><code class=\"language-text\">Promise</code> 가 콜 스택으로 가고 콜백함수를 마이크로태스크 큐에 넣는다.</p>\n<img src=\"https://github.com/baeharam/Must-Know-About-Frontend/blob/main/images/javascript/task5.png?raw=true\">\n<p>이벤트 루프는 마이크로태스크 큐에서 제일 오래된 태스크인 <code class=\"language-text\">Promise</code> 의 콜백함수를 가져와 콜 스택에 넣는다.</p>\n<img src=\"https://github.com/baeharam/Must-Know-About-Frontend/blob/main/images/javascript/task6.png?raw=true\">\n<p><code class=\"language-text\">Promise</code> 의 콜백함수가 끝나고 태스크 큐에서 제일 오래된 태스크인 <code class=\"language-text\">setTimeout()</code> 의 콜백함수를 가져와 콜 스택에 넣는다.</p>\n<img src=\"https://github.com/baeharam/Must-Know-About-Frontend/blob/main/images/javascript/task7.png?raw=true\">\n<p><code class=\"language-text\">setTimeout()</code> 의 콜백함수가 끝나면 콜 스택이 비게 되고 프로그램이 종료된다.</p>\n<br>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/9384758/what-is-the-execution-context-in-javascript-exactly\">What is the ‘Execution Context’ in JavaScript exactly?</a></li>\n<li><a href=\"https://velog.io/@imacoolgirlyo/JS-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-Hoisting-The-Execution-Context-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85-%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-6bjsmmlmgy\">[JS] 자바스크립트의 The Execution Context (실행 컨텍스트) 와 Hoisting (호이스팅)</a></li>\n<li><a href=\"https://meetup.toast.com/posts/123\">자바스크립트 함수 (2) - 함수 호출</a></li>\n<li><a href=\"https://medium.com/@g.smellyshovel/the-ecmascript-executable-code-and-execution-contexts-chapter-explained-fa6e098e230f#f88f\">The ECMAScript “Executable Code and Execution Contexts” chapter explained</a></li>\n<li><a href=\"http://dmitrysoshnikov.com/ecmascript/es5-chapter-3-2-lexical-environments-ecmascript-implementation/#this-binding\">ECMA-262-5 in detail. Chapter 3.2. Lexical environments: ECMAScript implementation.</a></li>\n<li><a href=\"https://2ality.com/2011/04/ecmascript-5-spec-lexicalenvironment.html\">ECMAScript 5 spec: LexicalEnvironment versus VariableEnvironment</a></li>\n<li><a href=\"https://stackoverflow.com/questions/23948198/variable-environment-vs-lexical-environment\">Variable Environment vs lexical environment</a></li>\n<li><a href=\"https://tc39.es/ecma262/\">ECMAScript 2020 Language Specification</a></li>\n<li><a href=\"https://medium.com/better-programming/javascript-internals-execution-context-bdeee6986b3b\">JavaScript Internals: Execution Context</a></li>\n<li><a href=\"https://meetup.toast.com/posts/89\">자바스크립트와 이벤트 루프</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=8aGhZQkoFbQ\">what the heck is the event loop anyway</a></li>\n<li><a href=\"https://javascript.info/event-loop\">Event loop: microtasks and macrotasks</a></li>\n</ul>","frontmatter":{"title":"실행 컨텍스트 그리고 이벤트루프","date":"October 25, 2021"}}},"pageContext":{"slug":"/JavaScript/실행-컨텍스트-그리고-이벤트루프/","previous":{"fields":{"slug":"/Web/lighthouse로-웹-페이지-분석해보기/"},"frontmatter":{"title":"Lighthouse로 웹 페이지 분석해보기"}},"next":{"fields":{"slug":"/자료구조/해시테이블-넌-누구냐/"},"frontmatter":{"title":"해시테이블 넌 누구냐"}}}},"staticQueryHashes":["2486386679","3128451518"]}