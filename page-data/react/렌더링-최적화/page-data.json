{"componentChunkName":"component---src-templates-blog-post-js","path":"/react/렌더링-최적화/","result":{"data":{"site":{"siteMetadata":{"title":"Yeongjae-Shin.io","author":"Yeongjae-Shin","siteUrl":"https://yeongjae-shin.github.io","comment":{"disqusShortName":"","utterances":"Yeongjae-Shin/Yeongjae-Shin.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"67bf1878-3b26-56d4-97ce-effae8bfe299","excerpt":"취업 후 4달만에 쓰는 블로그라니.. 😱 그 동안 바쁘다는 핑계로 너무 소홀했던 것 같다. 매일매일은 아니더라도 꾸준히 글을 써야겠다는 다짐(작심삼일)을 하면서 오랜만에 글을 써본다. 성능 최적화에 대해 설명하기에 앞서 React에서 렌더링이 일어나는 이유에 대해 알아야 한다. React에서 렌더링을 실행하는 과정 React에서 렌더링을 수행하는 시점은 다음과 같다. Props의 변화가 일어났을 때 State의 변화가 일어났을 때 forceUpdate…","html":"<p>취업 후 4달만에 쓰는 블로그라니.. 😱 그 동안 바쁘다는 핑계로 너무 소홀했던 것 같다.</p>\n<p>매일매일은 아니더라도 꾸준히 글을 써야겠다는 다짐(작심삼일)을 하면서 오랜만에 글을 써본다.</p>\n<hr>\n<p>성능 최적화에 대해 설명하기에 앞서 React에서 렌더링이 일어나는 이유에 대해 알아야 한다.</p>\n<h1 id=\"react에서-렌더링을-실행하는-과정\" style=\"position:relative;\"><a href=\"#react%EC%97%90%EC%84%9C-%EB%A0%8C%EB%8D%94%EB%A7%81%EC%9D%84-%EC%8B%A4%ED%96%89%ED%95%98%EB%8A%94-%EA%B3%BC%EC%A0%95\" aria-label=\"react에서 렌더링을 실행하는 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React에서 렌더링을 실행하는 과정</h1>\n<p>React에서 렌더링을 수행하는 시점은 다음과 같다.</p>\n<blockquote>\n<ol>\n<li>Props의 변화가 일어났을 때</li>\n<li>State의 변화가 일어났을 때</li>\n<li>forceUpdate()를 실행했을 때</li>\n<li>부모 컴포넌트가 렌더링되었을 때</li>\n</ol>\n</blockquote>\n<p>1 ~ 3의 과정을 통해 컴포넌트가 렌더링이 될 때, 자식 컴포넌트 또한 같은 과정으로 렌더링이 진행된다.</p>\n<p>하지만 컴포넌트에서 렌더링 결과에 전혀 영향을 미치지 않는 변화가 일어나면 불필요한 렌더링이 발생하게 되고, 이는 앱의 성능에 악영향을 끼치게 된다.</p>\n<p>렌더링 과정에서 수행하는 로직이 많을수록, 많은 컴포넌트를 출력할 수록 손실은 더욱 커지게 된다.</p>\n<hr>\n<h1 id=\"그래서-스타일링과-무슨-상관이-있나요\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-%EC%8A%A4%ED%83%80%EC%9D%BC%EB%A7%81%EA%B3%BC-%EB%AC%B4%EC%8A%A8-%EC%83%81%EA%B4%80%EC%9D%B4-%EC%9E%88%EB%82%98%EC%9A%94\" aria-label=\"그래서 스타일링과 무슨 상관이 있나요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그래서 스타일링과 무슨 상관이 있나요?</h1>\n<p>이번에 설명하고자 하는 스타일링과 관련한 성능 최적화와 렌더링은 무슨 상관이 있을까?</p>\n<p>간단한 예시를 들어보겠다.</p>\n<p>우리가 스타일링을 할 때 어쩔수 없이 인라인 스타일로 스타일링을 할 때가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 예시</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Button</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>button style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">\"#fff\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>버튼<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Button<span class=\"token punctuation\">;</span></code></pre></div>\n<p>이런식으로 말이다.</p>\n<p>앱이 렌더링이 되면서 코드를 읽어 내려가는데, 객체의 메모리 주소값은 항상 다르기 때문에 가상 DOM에 변화가 일어났다고 인식해서 불필요한 리렌더링이 발생하게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">===</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p>그렇다면 어떤식으로 스타일링을 해야 불필요한 리렌더링을 방지할 수 있을까?</p>\n<hr>\n<h2 id=\"1-styled-components-활용하기\" style=\"position:relative;\"><a href=\"#1-styled-components-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"1 styled components 활용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. styled-components 활용하기</h2>\n<p>모든 회사에 웹디자이너 혹은 웹퍼블리셔가 있지는 않기 때문에 직접 UI를 구성하고 개발하는 경우가 많이 있다.</p>\n<p>그래서 나 같이 미적감각이 전무한 사람들은 잘 만들어진 UI 라이브러리를 많이 사용하게 된다.</p>\n<p>그러나 잘 만들어진 UI 라이브러리를 사용하게 되면 디자인들이 획일화되기도 하고, 회사가 원하는 바와 다르게 나올수 있기 때문에 직접 커스텀을 해서 사용하게 된다.</p>\n<p>보통 커스텀을 하게 된다면 인라인 스타일로 원래 있는 CSS 속성을 덮어쓰게 되는데 이렇게 되면 위에서 적은 불필요한 리렌더링이 발생하게 된다.</p>\n<p>그렇다면 UI 라이브러리를 사용하면서 성능 최적화와 커스텀 두 마리의 토끼를 잡을 수 있을까?</p>\n<p>물론 CSS 파일을 만들어 클래스명을 가져와 덮어씌우는 방법도 있지만 그리 힙한 방법은 아니다.</p>\n<p>우리에게는 힙한 <code class=\"language-text\">styled-components</code>가 있지 않은가? <del>물론 요즘은 <code class=\"language-text\">emotion</code>이 핫한 것 같지만…</del></p>\n<p>어쨌든 <code class=\"language-text\">styled-components</code>를 활용해 성능 최적화를 할 수가 있다.</p>\n<p>예시는 요즘 내가 사용하는 <code class=\"language-text\">Ant-design</code>을 예시로 들어보겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 인라인 스타일 예시</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Button <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"antd\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">LoginForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span> style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> marginTop<span class=\"token operator\">:</span> <span class=\"token string\">\"10px\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      로그인\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> LoginForm<span class=\"token punctuation\">;</span></code></pre></div>\n<p>인라인 스타일을 사용하게 되면 코드도 깔끔하지 않을 뿐더러, 아무런 변화가 없지만 불필요한 리렌더링을 발생시킨다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// styled-components 예시</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> styled <span class=\"token keyword\">from</span> <span class=\"token string\">\"styled-components\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Button <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"antd\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> LoginBtn <span class=\"token operator\">=</span> <span class=\"token function\">styled</span><span class=\"token punctuation\">(</span>Button<span class=\"token punctuation\">)</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  margin-top: 10px;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">LoginForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>LoginBtn type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>로그인<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>LoginBtn<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> LoginForm<span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 UI 라이브러리의 모듈을 <code class=\"language-text\">styled-components</code>를 활용하여 인라인 스타일을 사용하지 않고 쉽게 커스텀을 할 수가 있다.</p>\n<h2 id=\"2-usememo-활용하기\" style=\"position:relative;\"><a href=\"#2-usememo-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"2 usememo 활용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. useMemo 활용하기</h2>\n<p>React Hook 중에 <code class=\"language-text\">useMemo</code>라는 것이 있다. Memo는 <code class=\"language-text\">memoized</code>를 의미하는데, 이는 이전에 한 번 사용한 값을 재사용한다는 의미를 가지고 있다.</p>\n<p>그렇다면 <code class=\"language-text\">useMemo</code>를 이용해서 어떻게 불필요한 리렌더링을 방지할 수 있을까?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useMemo <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Button <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"antd\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">LoginForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> btnStyle <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> marginTop<span class=\"token operator\">:</span> <span class=\"token string\">\"10px\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Button style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>btnStyle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>로그인<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> LoginForm<span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 Hook을 이용하여 필요한 스타일 객체를 캐싱해놓고 재사용을 하게 된다면 이미 기억하고 있는 객체이기 때문에 메모리주소값이 변하지 않아 불필요한 리렌더링이 발생하지 않게 된다.</p>\n<hr>\n<p>틀린 점이나 궁금한 점이 있으시면 댓글 달아주세요!</p>\n<p>읽어주셔서 감사합니다 🙇‍♂️</p>","frontmatter":{"title":"렌더링 최적화","date":"September 13, 2021"}}},"pageContext":{"slug":"/react/렌더링-최적화/","previous":{"fields":{"slug":"/기타/블로그를-이사했습니다!/"},"frontmatter":{"title":"블로그를 이사했습니다!"}},"next":{"fields":{"slug":"/회고록/눈-떠보니-1년이더라/"},"frontmatter":{"title":"눈 떠보니 1년이더라"}}}},"staticQueryHashes":["2486386679","3128451518"]}