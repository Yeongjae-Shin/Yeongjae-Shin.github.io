<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Yeongjae-Shin.io]]></title><description><![CDATA[1년차 프론트엔드 개발자의 블로그]]></description><link>https://yeongjae-shin.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Wed, 17 Nov 2021 14:07:27 GMT</lastBuildDate><item><title><![CDATA[해시테이블 넌 누구냐]]></title><description><![CDATA[해시테이블(Hash Table…]]></description><link>https://yeongjae-shin.github.io/자료구조/해시테이블-넌-누구냐/</link><guid isPermaLink="false">https://yeongjae-shin.github.io/자료구조/해시테이블-넌-누구냐/</guid><pubDate>Sun, 14 Nov 2021 15:12:22 GMT</pubDate><content:encoded>&lt;h1 id=&quot;해시테이블hash-table이란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%B4%EC%8B%9C%ED%85%8C%EC%9D%B4%EB%B8%94hash-table%EC%9D%B4%EB%9E%80&quot; aria-label=&quot;해시테이블hash table이란 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;해시테이블(Hash Table)이란?&lt;/h1&gt;
&lt;p&gt;해시테이블은 &lt;code class=&quot;language-text&quot;&gt;Key, Value&lt;/code&gt; 페어로 데이터를 저장하는 자료구조의 유형 중 하나로 빠르게 데이터를 검색할 수 있는 자료구조 입니다.
해시테이블이 빠른 검색속도를 제공하는 이유는 내부적으로 배열(버킷)을 이용하여 데이터를 저장하기 때문입니다. 해시테이블은 각각의 Key값에
해시함수를 적용해 배열의 고유한 &lt;code class=&quot;language-text&quot;&gt;index&lt;/code&gt;를 생성하고 이 &lt;code class=&quot;language-text&quot;&gt;index&lt;/code&gt;를 활용하여 값을 저장하거나 검색하게 됩니다. 여기서 실제 값이 저장되는 장소를
버킷 또는 슬롯이라고 합니다.&lt;/p&gt;
&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/7/7d/Hash_table_3_1_1_0_1_0_0_SP.svg/1200px-Hash_table_3_1_1_0_1_0_0_SP.svg.png&quot;&gt;
&lt;p&gt;예를 들어, 우리가 &lt;code class=&quot;language-text&quot;&gt;Key, Value&lt;/code&gt;가 &lt;code class=&quot;language-text&quot;&gt;&apos;John Smith&apos;, &apos;521-1234&apos;&lt;/code&gt;인 데이터를 크기가 16인 해시테이블에 저장한다고 가정해봅시다. 그러면
면저 &lt;code class=&quot;language-index = hash_function(&apos;john smith&apos;) &quot;&gt; 16&lt;/code&gt; 연산을 통해 &lt;code class=&quot;language-text&quot;&gt;index&lt;/code&gt;값을 계산합니다. 그리고 &lt;code class=&quot;language-text&quot;&gt;array[index] = &apos;521-1234&apos;&lt;/code&gt;로
전화번호를 저장하게 됩니다. 이러한 구조로 데이터를 저장하면 Key값으로 데이터를 찾을 때 해시 함수를 한 번만 수행하면 되어 매우 빠르게 데이터를
저장/삭제/조회 할 수 있습니다. &lt;/p&gt;
&lt;p&gt;이렇게 &lt;code class=&quot;language-text&quot;&gt;index&lt;/code&gt;를 통해 필요한 데이터를 바로 찾을 수 있기 때문에 해시테이블의 평균 시간복잡도는 &lt;code class=&quot;language-text&quot;&gt;O(1)&lt;/code&gt;입니다.&lt;/p&gt;
&lt;h2 id=&quot;해시함수&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%B4%EC%8B%9C%ED%95%A8%EC%88%98&quot; aria-label=&quot;해시함수 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;해시함수&lt;/h2&gt;
&lt;p&gt;해시함수에서 중요한 것은 고유한 인덱스 값을 설정하는 것입니다. 해시테이블에서 사용되는 대표적인 해시함수는 아래의 4가지가 있습니다. 그 중 가장 대표적인것은 &lt;code class=&quot;language-text&quot;&gt;Division Method&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;Multiplication Method&lt;/code&gt;입니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Division Method: 나눗셈을 이용하는 방법으로 입력값을 테이블의 크기로 나누어 계산합니다. &lt;code class=&quot;language-주소 = 입력값 &quot;&gt; 테이블의 크기&lt;/code&gt;로 테이블의 크기를 소수로 정하고 2의 제곱수와 먼 값을 사용해야 효과가 좋다고 알려져 있습니다.&lt;/li&gt;
&lt;li&gt;Digit Folding: 각 Key의 문자열을 ASCII 코드로 바꾸고 값을 합한 데이터를 테이블 내의 주소로 사용하는 방법입니다.&lt;/li&gt;
&lt;li&gt;Multiplication Method: 숫자로된 Key값 K와 0과 1 사이의 실수 A, 보통 2의 제곱수인 m을 사용하여 다음과 같은 계산을 해줍니다.&lt;/li&gt;
&lt;li&gt;Universal Hashing: 다수의 해시함수를 만들어 집합 H에 넣어두고, 무작위로 해시함수를 선택해 해시값을 만드는 기법입니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;해시충돌&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%B4%EC%8B%9C%EC%B6%A9%EB%8F%8C&quot; aria-label=&quot;해시충돌 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;해시충돌&lt;/h1&gt;
&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/5/58/Hash_table_4_1_1_0_0_1_0_LL.svg/2560px-Hash_table_4_1_1_0_0_1_0_LL.svg.png&quot;&gt;
&lt;p&gt;해시충돌은 해시테이블의 한 주소를 놓고 두 개 이상의 원소가 충돌하는 것을 말합니다. 쉽게 말하면 해싱을 해서 삽입하려하니 이미 다른 원소가 자리를 차지하고 있는 상황을 말합니다.
해시함수가 무한한 가짓수의 입력값을 받아 유한한 가짓수의 출력값을 생성하는 경우, &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EB%B9%84%EB%91%98%EA%B8%B0%EC%A7%91_%EC%9B%90%EB%A6%AC&quot;&gt;비둘기집 원리&lt;/a&gt;에 의해 해시충돌은 항상 존재하게 됩니다.
해시충돌을 해결하는 방법은 크게 2가지가 있습니다.&lt;/p&gt;
&lt;h2 id=&quot;해시충돌-해결법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%B4%EC%8B%9C%EC%B6%A9%EB%8F%8C-%ED%95%B4%EA%B2%B0%EB%B2%95&quot; aria-label=&quot;해시충돌 해결법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;해시충돌 해결법&lt;/h2&gt;
&lt;h3 id=&quot;분리-연결법separate-chaining&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B6%84%EB%A6%AC-%EC%97%B0%EA%B2%B0%EB%B2%95separate-chaining&quot; aria-label=&quot;분리 연결법separate chaining permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;분리 연결법(Separate Chaining)&lt;/h3&gt;
&lt;img src=&quot;https://media.vlpt.us/post-images/cyranocoding/329e7e60-b226-11e9-a4ce-730fc6b3757a/16eBeaqTti8MxWPsw4xBgw.png&quot;&gt;
&lt;p&gt;분리 연결법이란 자료를 저장할 때 버킷에서 충돌이 일어나면 해당 값을 기존 값과 연결시키는 방법입니다. 위 사진에서 Sandra를 저장할 때 충돌이 일어났고, 기존에 있던 John에 연결시켰습니다.
이 때 연결리스트(Linked list) 자료구조를 이용합니다. 다음에 저장된 자료를 기존의 자료 다음에 위치시키는 것입니다.&lt;/p&gt;
&lt;p&gt;분리 연결법에는 장점과 단점이 존재합니다.&lt;/p&gt;
&lt;h4 id=&quot;장점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%A5%EC%A0%90&quot; aria-label=&quot;장점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;장점&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;한정된 버킷을 효율적으로 사용할 수 있습니다.&lt;/li&gt;
&lt;li&gt;해시함수를 선택하는 중요성이 상대적으로 낮습니다.&lt;/li&gt;
&lt;li&gt;상대적으로 적은 메모리를 사용합니다. 즉, 미리 공간을 잡아 놓을 필요가 없습니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;단점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8B%A8%EC%A0%90&quot; aria-label=&quot;단점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;단점&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;데이터의 수가 많아지면 동일한 버킷에 연결되는 데이터가 많아지게 됩니다. (쏠림 현상)&lt;/li&gt;
&lt;li&gt;그에 따라 캐싱의 효율성이 감소하게 됩니다.&lt;/li&gt;
&lt;li&gt;추가 저장 공간을 사용해야 합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;개방-주소법open-addressing&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%9C%EB%B0%A9-%EC%A3%BC%EC%86%8C%EB%B2%95open-addressing&quot; aria-label=&quot;개방 주소법open addressing permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;개방 주소법(Open Addressing)&lt;/h3&gt;
&lt;p&gt;개방 주소법이란 추가적인 메모리를 사용하는 분리 연결법 방식과 다르게 비어있는 해시 테이블의 공간을 활용하는 방법입니다. 개방 주소법을 구현하기 위한 방식에는 대표적으로 3가지가 있습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Linear Probing: 현재 버킷의 &lt;code class=&quot;language-text&quot;&gt;index&lt;/code&gt;로부터 고정폭만큼 이동하여 차례대로 검색해 비어 있는 버킷에 데이터를 저장하는 방식입니다.&lt;/li&gt;
&lt;li&gt;Quadratic Probing: 해시의 저장순서 폭을 제곱으로 저장하는 방식입니다. 예를 들어, 처음 충돌이 발생한 경우에는 1만큼 이동하고 그 다음 계속 충돌이 발생하면 2^2, 3^2칸씩 옮기는 방식입니다.&lt;/li&gt;
&lt;li&gt;Double Hashing Probing: 해시된 값을 한 번 더 해싱하여 해시의 규칙성을 없애버리는 방식입니다. 한 번 더 해싱하여 새로운 주소를 할당하기 때문에 다른 방법들보다 많은 연산을 하게 됩니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FWR1fv%2FbtqL5APCcSa%2FBZN6wvxUXzJBEiOfOMLfR0%2Fimg.png&quot;&gt;
&lt;h4 id=&quot;장점-1&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%A5%EC%A0%90-1&quot; aria-label=&quot;장점 1 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;장점&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;또 다른 저장공간 없이 해시테이블 내에서 데이터 저장 및 처리가 가능합니다.&lt;/li&gt;
&lt;li&gt;또 다른 저장공간에서의 추가적인 작업이 없습니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;단점-1&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8B%A8%EC%A0%90-1&quot; aria-label=&quot;단점 1 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;단점&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;해시함수의 성능에 전체 해시테이블의 성능이 좌지우지 됩니다.&lt;/li&gt;
&lt;li&gt;데이터의 길이가 늘어나면 그에 해당하는 저장소를 마련해두어야 합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;해시테이블의-시간-복잡도&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%B4%EC%8B%9C%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%98-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84&quot; aria-label=&quot;해시테이블의 시간 복잡도 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;해시테이블의 시간 복잡도&lt;/h1&gt;
&lt;p&gt;각각의 Key값은 해시함수에 의해 고유한 &lt;code class=&quot;language-text&quot;&gt;index&lt;/code&gt;를 가지게 되어 바로 접근할 수 있으므로 평균 O(1)의 시간복잡도로 데이터를 조회할 수 있습니다.
하지만 해시충돌이 발생한 경우 체이닝에 연결된 리스트들까지 검색을 해야하기 때문에 최악의 경우 O(n)까지 시간복잡도가 증가할 수 있습니다.
만약 테이블이 꽉 차있는 경우라면 테이블을 확장해야 하는데, 이는 매우 섬각한 성능의 저하를 불러오기 때문에 가급적이면 확장을 하지 않도록 테이블을 설계해야 합니다.
해시테이블의 공간 사용률이 70 ~ 80% 정도가 되면 해시충돌이 빈번하게 발생하여 성능이 저하되기 시작한다고 합니다.&lt;/p&gt;
&lt;p&gt;또한 해시테이블에서 자주 사용하게 되는 데이터를 캐시에 적용하면 효율을 높일 수 있습니다. 자주 hit하게 되는 데이터를 캐시에서 바로 찾음으로써 해시테이블의 성능을 향상시킬 수 있습니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[실행 컨텍스트 그리고 이벤트루프]]></title><description><![CDATA[실행 컨텍스트 (Execution Context…]]></description><link>https://yeongjae-shin.github.io/JavaScript/실행-컨텍스트-그리고-이벤트루프/</link><guid isPermaLink="false">https://yeongjae-shin.github.io/JavaScript/실행-컨텍스트-그리고-이벤트루프/</guid><pubDate>Mon, 25 Oct 2021 23:10:12 GMT</pubDate><content:encoded>&lt;h1 id=&quot;실행-컨텍스트-execution-context&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-execution-context&quot; aria-label=&quot;실행 컨텍스트 execution context permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;실행 컨텍스트 (Execution Context)&lt;/h1&gt;
&lt;h2 id=&quot;정의&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%95%EC%9D%98&quot; aria-label=&quot;정의 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;정의&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;코드의 실행환경에 대한 여러가지 정보를 담고 있는 개념&lt;/strong&gt; 으로, 간단히 말하자면 자바스크립트 엔진에 의해 만들어지고 사용되는 코드 정보를 담은 객체의 집합이라고 할 수 있다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;종류&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A2%85%EB%A5%98&quot; aria-label=&quot;종류 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;종류&lt;/h2&gt;
&lt;p&gt;자바스크립트의 코드는 3가지 종류로 이루어지는데, 글로벌 스코프에서 실행하는 글로벌 코드, 함수 스코프에서 실행하는 함수 코드 그리고 여기서 다루진 않지만 &lt;code class=&quot;language-text&quot;&gt;eval()&lt;/code&gt; 로 실행되는 코드가 있다. 이 각각의 코드는 자신만의 실행 컨텍스트를 생성한다.&lt;/p&gt;
&lt;p&gt;엔진이 스크립트 파일을 실행하기 전에 &lt;strong&gt;글로벌 실행 컨텍스트(Global Execution Context, GEC)&lt;/strong&gt; 가 생성되고, 함수를 호출할 때마다 &lt;strong&gt;함수 실행 컨텍스트(Function Execution Context, FEC)&lt;/strong&gt; 가 생성된다. 주의할 점은, 글로벌의 경우 실행 이전에 생성되지만 함수의 경우 호출할 때 생성된다는 점이다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;실행-컨텍스트-스택-execution-context-stack&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-%EC%8A%A4%ED%83%9D-execution-context-stack&quot; aria-label=&quot;실행 컨텍스트 스택 execution context stack permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;실행 컨텍스트 스택 (Execution Context Stack)&lt;/h2&gt;
&lt;p&gt;실행 컨텍스트가 생성되면 흔히 콜 스택(Call Stack)이라고도 불리는 실행 컨텍스트 스택에 쌓이게 된다. GEC는 코드를 실행하기 전에 쌓이고 모든 코드를 실행하면 제거된다. FEC는 호출할 때 쌓이고 호출이 끝나면 제거된다. 예시 코드를 통해 살펴보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;함수 실행 컨텍스트&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;글로벌 실행 컨텍스트&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;제일 처음, 코드를 실행하기 전에 GEC가 쌓이고 코드를 실행하면서 콘솔에 “글로벌 실행 컨텍스트” 가 출력된다. 그 다음 &lt;code class=&quot;language-text&quot;&gt;func()&lt;/code&gt; 을 호출하고 그에 대한 FEC가 만들어져 쌓이고 FEC를 실행하며 콘솔에 “함수 실행 컨텍스트” 가 출력된다. 이후 &lt;code class=&quot;language-text&quot;&gt;func()&lt;/code&gt; 이 종료되고 FEC가 스택에서 제거된 후, 모든 코드의 실행이 끝나면서 GEC가 스택에서 제거된다. &lt;a href=&quot;https://miro.medium.com/max/1100/1*dUl6qPEaDJJTXWythQsEtQ.gif&quot;&gt;GIF&lt;/a&gt; 를 통해서 더 쉽게 이해할 수 있으니 꼭 보자.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;구성요소&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C&quot; aria-label=&quot;구성요소 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;구성요소&lt;/h2&gt;
&lt;p&gt;실행 컨텍스트는 다음과 같은 구성요소를 갖는다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lexical Environment&lt;/li&gt;
&lt;li&gt;Variable Environment&lt;/li&gt;
&lt;li&gt;this 바인딩&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;lexical-environment&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#lexical-environment&quot; aria-label=&quot;lexical environment permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Lexical Environment&lt;/h3&gt;
&lt;p&gt;Lexical Environment는 &lt;strong&gt;변수 및 함수 등의 식별자(Identifier) 및 외부 참조에 관한 정보를 가지고 있는 컴포넌트&lt;/strong&gt; 이다. 이 컴포넌트는 2개의 구성요소를 갖는다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Environment Record&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;outer 참조&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Environment Record가 식별자에 관한 정보를 가지고 있으며 outer 참조는 외부 Lexical Environment를 참조하는 포인터이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같은 코드가 있을 때는 아래와 같이 Lexical Environment가 형성된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;globalEnvironment = {
	environmentRecord = { x: 10 },
	outer: null
}
fooEnvironment = {
	environmentRecord = { y: 20 },
	outer: globalEnvironment
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;따라서, &lt;code class=&quot;language-text&quot;&gt;foo()&lt;/code&gt; 에서 &lt;code class=&quot;language-text&quot;&gt;x&lt;/code&gt; 를 참조할 때는 현재 Environment Record를 찾아보고 없기 때문에 outer 참조를 사용하여 외부의 Lexical Environment에 속해 있는 Environment Record를 찾아보는 방식이다.&lt;/p&gt;
&lt;h3 id=&quot;variable-environment&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#variable-environment&quot; aria-label=&quot;variable environment permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Variable Environment&lt;/h3&gt;
&lt;p&gt;Variable Environment는 Lexical Environment와 동일한 성격을 띠지만 &lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt; 로 선언된 변수만 저장한다는 점에서 다르다.&lt;/strong&gt; 즉, Lexical Environment는 &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt; 로 선언된 변수를 제외하고 나머지(&lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt; 으로 선언되었거나 함수 선언문)를 저장한다. ( 코드로 확인해 볼려면 &lt;a href=&quot;https://stackoverflow.com/a/45788048/11789111&quot;&gt;여기&lt;/a&gt; 를 보자 )&lt;/p&gt;
&lt;h3 id=&quot;this-바인딩&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#this-%EB%B0%94%EC%9D%B8%EB%94%A9&quot; aria-label=&quot;this 바인딩 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;this 바인딩&lt;/h3&gt;
&lt;p&gt;this의 바인딩은 실행 컨텍스트가 생성될 때마다 this 객체에 어떻게 바인딩이 되는지를 나타낸 것이다.  (ES6부터 this의 바인딩이 LexicalEnvironment 안에 있는 EnvironmentRecord 안에서 일어난다는 사실을 기억해두도록 하자. 그렇게 중요하진 않으니 알고만 있자.)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;GEC의 경우&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;strict mode라면 &lt;code class=&quot;language-text&quot;&gt;undefined&lt;/code&gt; 로 바인딩된다.&lt;/li&gt;
&lt;li&gt;아니라면 글로벌 객체로 바인딩된다. (브라우저에선 window, 노드에선 global)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;FEC의 경우&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;해당 함수가 어떻게 호출되었는지에 따라 바인딩된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;과정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B3%BC%EC%A0%95&quot; aria-label=&quot;과정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;과정&lt;/h2&gt;
&lt;p&gt;EC는 2가지 과정을 거친다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Creation Phase (생성단계)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Execution Phase (실행단계)&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;생성단계&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%83%9D%EC%84%B1%EB%8B%A8%EA%B3%84&quot; aria-label=&quot;생성단계 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;생성단계&lt;/h3&gt;
&lt;p&gt;생성단계는 다시 3가지 단계로 이루어진다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Lexical Environment 생성&lt;/li&gt;
&lt;li&gt;Variable Environment 생성&lt;/li&gt;
&lt;li&gt;this 바인딩&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;여기서 &lt;strong&gt;주의할 점은 값이 변수에 매핑되지 않는다는 것&lt;/strong&gt; 이다. &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt; 의 경우는 &lt;code class=&quot;language-text&quot;&gt;undefined&lt;/code&gt; 로 초기화되고 &lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt; 이나 &lt;code class=&quot;language-text&quot;&gt;const&lt;/code&gt; 는 아무 값도 가지지 않는다.&lt;/p&gt;
&lt;h3 id=&quot;실행단계&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%A4%ED%96%89%EB%8B%A8%EA%B3%84&quot; aria-label=&quot;실행단계 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;실행단계&lt;/h3&gt;
&lt;p&gt;이제 코드를 실행하면서 &lt;strong&gt;변수에 값을 매핑시킨다.&lt;/strong&gt; 예시를 통해 보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; t &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; r &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GEC의 생성 단계&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;여기서 생성이 될 때 실행 컨텍스트 스택에 쌓인다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;GEC {
	ThisBinding: window,
	LexicalEnvironment: {
		EnvironmentRecord: {
			b: &amp;lt;uninitialized&gt;,
			func: func(){...}
		},
		outer 참조: null
	},
	VariableEnvironment: {	
		EnvironmentRecord: {
			a: undefined,
			r: undefined
		},
		outer 참조: null
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GEC의 실행 단계&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;GEC {
	ThisBinding: window,
	LexicalEnvironment: {
		EnvironmentRecord: {
			b: 4,
			func: func(){...}
		},
		outer 참조: null
	},
	VariableEnvironment: {
		EnvironmentRecord: {
			a: 3,
			r: undefined
		},
		outer 참조: null
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 &lt;code class=&quot;language-text&quot;&gt;func()&lt;/code&gt; 을 호출하고 FEC를 생성한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;FEC의 생성 단계&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;FEC {
	ThisBinding: window,
	LexicalEnvironment: {
		EnvironmentRecord: {
			arguments: { num: 4, length: 1 },
		},
		outer: GEC의 LexicalEnvironment
	},
	VariableEnvironment: {
		EnvironmentRecord: {
			t: undefined
		},
		outer: GEC의 LexicalEnvironment
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;FEC의 실행 단계&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;FEC {
	ThisBinding: window,
	LexicalEnvironment: {
		EnvironmentRecord: {
			arguments: { num: 4, length: 1 },
		},
		outer: GEC의 LexicalEnvironment
	},
	VariableEnvironment: {
		EnvironmentRecord: {
			t: 9
		},
		outer: GEC의 LexicalEnvironment
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;FEC가 스택에서 제거 되고 GEC의 &lt;code class=&quot;language-text&quot;&gt;r&lt;/code&gt; 이 20으로 초기화된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;GEC {
	ThisBinding: window,
	LexicalEnvironment: {
		EnvironmentRecord: {
			b: 4,
			func: func(){...}
		},
		outer 참조: null
	},
	VariableEnvironment: {
		EnvironmentRecord: {
			a: 3,
			r: 20
		},
		outer 참조: null
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;모든 코드를 실행하고 GEC가 스택에서 제거된 뒤 프로그램이 종료된다. &lt;a href=&quot;https://miro.medium.com/max/1100/1*SBP65hdVDW5j0LuVryTiXw.gif&quot;&gt;GIF&lt;/a&gt; 를 보면 더 확실히 이해할 수 있으니 꼭 보자.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;이벤트-루프-event-loop&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%A3%A8%ED%94%84-event-loop&quot; aria-label=&quot;이벤트 루프 event loop permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;이벤트 루프 (Event loop)&lt;/h1&gt;
&lt;p&gt;자바스크립트는 &lt;strong&gt;단일 스레드(Single-threaded) 기반 언어&lt;/strong&gt; 로, 자바스크립트 엔진이 단일 콜 스택을 갖는다. 이 말은 요청이 동기적으로 처리된다는 것을 의미한다. 그렇다면 비동기 요청은 어떻게 처리될 수 있을까? 그것은 바로 자바스크립트를 실행하는 환경인 브라우저나 Node.js가 담당한다. &lt;strong&gt;여기서 자바스크립트 엔진과 그 실행 환경을 상호 연동시켜주는 장치가 바로 이벤트 루프이다.&lt;/strong&gt; 따라서, 이벤트 루프는 자바스크립트 엔진에 있지 않고 그 환경에 속한다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;태스크-큐task-queue와-마이크로태스크-큐microtask-queue&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%83%9C%EC%8A%A4%ED%81%AC-%ED%81%90task-queue%EC%99%80-%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%ED%83%9C%EC%8A%A4%ED%81%AC-%ED%81%90microtask-queue&quot; aria-label=&quot;태스크 큐task queue와 마이크로태스크 큐microtask queue permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;태스크 큐(Task queue)와 마이크로태스크 큐(Microtask queue)&lt;/h2&gt;
&lt;p&gt;자바스크립트의 실행 환경은 2가지 큐를 가지고 있으며 &lt;strong&gt;각각 스크립트 실행, 이벤트 핸들러, 콜백함수 등의 태스크(Task) 담기는 공간이다.&lt;/strong&gt; 태스크가 콜백함수라면 그 종류에 따라 다른 큐에 담기며 대표적인 예로는 다음과 같은 것들이 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;태스크 큐&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;setTimeout()&lt;/code&gt; , &lt;code class=&quot;language-text&quot;&gt;setInterval()&lt;/code&gt; , UI 렌더링, &lt;code class=&quot;language-text&quot;&gt;requestAnimationFrame()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;마이크로태스크 큐&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Promise, MutationObserver&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이벤트 루프는 2개의 큐를 감시하고 있다가 콜 스택이 비게 되면, 콜백함수를 꺼내와서 실행한다. 이 때 &lt;strong&gt;마이크로태스크 큐의 콜백함수가 우선순위를 가지기 때문에&lt;/strong&gt; 마이크로태스크 큐의 콜백함수를 전부 실행하고 나서 태스크 큐의 콜백함수들을 실행한다. (단, UI 렌더링이 태스크 큐에 속하기 때문에 마이크로태스크 큐의 태스크가 많으면 렌더링이 지연될 수 있다.)&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;예시를-통한-동작방식의-이해&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%98%88%EC%8B%9C%EB%A5%BC-%ED%86%B5%ED%95%9C-%EB%8F%99%EC%9E%91%EB%B0%A9%EC%8B%9D%EC%9D%98-%EC%9D%B4%ED%95%B4&quot; aria-label=&quot;예시를 통한 동작방식의 이해 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;예시를 통한 동작방식의 이해&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;시작&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;첫번째 setTimeout&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;첫번째 promise, 첫번째 then&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;첫번째 promise, 두번째 then&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;두번째 setTimeout&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;두번째 promise, 첫번째 then&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;두번째 promise, 두번째 then&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;끝&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;결과는 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;시작
끝
첫번째 promise, 첫번째 then
두번째 promise, 첫번째 then
첫번째 promise, 두번째 then
두번째 promise, 두번째 then
첫번째 setTimeout
두번째 setTimeout&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;처음 스크립트가 로드될 때 &lt;strong&gt;“스크립트 실행”&lt;/strong&gt; 이라는 태스크가 먼저 태스크 큐에 들어간다. 그리고 나서 이벤트 루프가 태스크 큐에서 해당 태스크를 가져와 콜 스택을 실행하는 것이다. 즉, 콜 스택에는 이미 GEC(Global Execution Context)가 생성되어 있는 상태에서 “스크립트 실행” 이라는 태스크를 실행하게 되면 그제서야 GEC에 속한 코드가 실행되는 방식이다.&lt;/p&gt;
&lt;p&gt;그럼 하나하나 어떻게 동작하는지 그림으로 살펴보자.&lt;/p&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/baeharam/Must-Know-About-Frontend/main/images/javascript/task0.png&quot;&gt;
&lt;p&gt;제일 먼저, “스크립트 실행” 태스크가 태스크 큐에 들어가게 된다.&lt;/p&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/baeharam/Must-Know-About-Frontend/main/images/javascript/task1.png&quot;&gt;
&lt;p&gt;이후, 이벤트 루프가 그 태스크를 가져와서 로드된 스크립트를 실행시킨다. 따라서 맨 처음에 &lt;code class=&quot;language-text&quot;&gt;console.log&lt;/code&gt; 가 실행된다.&lt;/p&gt;
&lt;img src=&quot;https://github.com/baeharam/Must-Know-About-Frontend/blob/main/images/javascript/task2.png?raw=true&quot;&gt;
&lt;p&gt;그 다음, &lt;code class=&quot;language-text&quot;&gt;setTimeout()&lt;/code&gt; 이 콜 스택으로 가고 브라우저가 이를 받아서 타이머를 동작시킨다.&lt;/p&gt;
&lt;img src=&quot;https://github.com/baeharam/Must-Know-About-Frontend/blob/main/images/javascript/task3.png?raw=true&quot;&gt;
&lt;p&gt;타이머가 끝나면 &lt;code class=&quot;language-text&quot;&gt;setTimeout()&lt;/code&gt; 의 콜백함수를 태스크 큐에 넣는다.&lt;/p&gt;
&lt;img src=&quot;https://github.com/baeharam/Must-Know-About-Frontend/blob/main/images/javascript/task4.png?raw=true&quot;&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Promise&lt;/code&gt; 가 콜 스택으로 가고 콜백함수를 마이크로태스크 큐에 넣는다.&lt;/p&gt;
&lt;img src=&quot;https://github.com/baeharam/Must-Know-About-Frontend/blob/main/images/javascript/task5.png?raw=true&quot;&gt;
&lt;p&gt;이벤트 루프는 마이크로태스크 큐에서 제일 오래된 태스크인 &lt;code class=&quot;language-text&quot;&gt;Promise&lt;/code&gt; 의 콜백함수를 가져와 콜 스택에 넣는다.&lt;/p&gt;
&lt;img src=&quot;https://github.com/baeharam/Must-Know-About-Frontend/blob/main/images/javascript/task6.png?raw=true&quot;&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Promise&lt;/code&gt; 의 콜백함수가 끝나고 태스크 큐에서 제일 오래된 태스크인 &lt;code class=&quot;language-text&quot;&gt;setTimeout()&lt;/code&gt; 의 콜백함수를 가져와 콜 스택에 넣는다.&lt;/p&gt;
&lt;img src=&quot;https://github.com/baeharam/Must-Know-About-Frontend/blob/main/images/javascript/task7.png?raw=true&quot;&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;setTimeout()&lt;/code&gt; 의 콜백함수가 끝나면 콜 스택이 비게 되고 프로그램이 종료된다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;reference&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/9384758/what-is-the-execution-context-in-javascript-exactly&quot;&gt;What is the ‘Execution Context’ in JavaScript exactly?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://velog.io/@imacoolgirlyo/JS-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-Hoisting-The-Execution-Context-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85-%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-6bjsmmlmgy&quot;&gt;[JS] 자바스크립트의 The Execution Context (실행 컨텍스트) 와 Hoisting (호이스팅)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://meetup.toast.com/posts/123&quot;&gt;자바스크립트 함수 (2) - 함수 호출&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@g.smellyshovel/the-ecmascript-executable-code-and-execution-contexts-chapter-explained-fa6e098e230f#f88f&quot;&gt;The ECMAScript “Executable Code and Execution Contexts” chapter explained&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://dmitrysoshnikov.com/ecmascript/es5-chapter-3-2-lexical-environments-ecmascript-implementation/#this-binding&quot;&gt;ECMA-262-5 in detail. Chapter 3.2. Lexical environments: ECMAScript implementation.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://2ality.com/2011/04/ecmascript-5-spec-lexicalenvironment.html&quot;&gt;ECMAScript 5 spec: LexicalEnvironment versus VariableEnvironment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/23948198/variable-environment-vs-lexical-environment&quot;&gt;Variable Environment vs lexical environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tc39.es/ecma262/&quot;&gt;ECMAScript 2020 Language Specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/better-programming/javascript-internals-execution-context-bdeee6986b3b&quot;&gt;JavaScript Internals: Execution Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://meetup.toast.com/posts/89&quot;&gt;자바스크립트와 이벤트 루프&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=8aGhZQkoFbQ&quot;&gt;what the heck is the event loop anyway&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://javascript.info/event-loop&quot;&gt;Event loop: microtasks and macrotasks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Lighthouse로 웹 페이지 분석해보기]]></title><description><![CDATA[Lighthouse란? Lighthouse는 구글에서 개발한, 웹 페이지의 품질을 개선할 수 있는 오픈 소스 형태의 자동화 도구입니다. 어떤 웹 페이지든 사용할 수 있습니다. Lighthouse…]]></description><link>https://yeongjae-shin.github.io/Web/lighthouse로-웹-페이지-분석해보기/</link><guid isPermaLink="false">https://yeongjae-shin.github.io/Web/lighthouse로-웹-페이지-분석해보기/</guid><pubDate>Wed, 20 Oct 2021 23:10:34 GMT</pubDate><content:encoded>&lt;img src=&quot;https://media.vlpt.us/images/wosk0106/post/ff1955a0-ba8f-4eb9-80fa-1bcc8de5c0a9/pwa-lighthouse.png&quot;&gt;
&lt;h1 id=&quot;lighthouse란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#lighthouse%EB%9E%80&quot; aria-label=&quot;lighthouse란 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Lighthouse란?&lt;/h1&gt;
&lt;p&gt;Lighthouse는 구글에서 개발한, 웹 페이지의 품질을 개선할 수 있는 오픈 소스 형태의 자동화 도구입니다. 어떤 웹 페이지든 사용할 수 있습니다.&lt;/p&gt;
&lt;h1 id=&quot;lighthouse에서-확인할-수-있는-부분&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#lighthouse%EC%97%90%EC%84%9C-%ED%99%95%EC%9D%B8%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EB%B6%80%EB%B6%84&quot; aria-label=&quot;lighthouse에서 확인할 수 있는 부분 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Lighthouse에서 확인할 수 있는 부분&lt;/h1&gt;
&lt;p&gt;가장 중요한 &lt;code class=&quot;language-text&quot;&gt;Performace&lt;/code&gt;부분만 자세하게 설명해보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;performance&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#performance&quot; aria-label=&quot;performance permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Performance&lt;/h2&gt;
&lt;p&gt;퍼포먼스는 말 그대로 웹 사이트의 성능을 보여주는 부분입니다. 간단하게 얘기하면 &lt;code class=&quot;language-text&quot;&gt;얼마나 빠르게 화면에 그려지고 사용자는 얼마나 빠르게 해당 콘텐츠를 인식하는지&lt;/code&gt;를 측정하는 것입니다.
Lighthouse에서 권고하는 대부분은 &lt;code class=&quot;language-text&quot;&gt;리소스 절약&lt;/code&gt;과 관련 있습니다. 자바스크립트 파일을 청크 단위로 쪼개고 크기를 줄이고 하면 점수가 올라가게 됩니다.
아래 사진은 현재 회사에서 서비스중인 웹 페이지의 퍼포먼스 점수 입니다.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
    &lt;figure&gt;
        &lt;img src=&quot;https://user-images.githubusercontent.com/60685930/138118373-413f8c13-b789-4f4f-a253-c662963058d2.png&quot;&gt;
        &lt;figcaption&gt;퍼포먼스 100점의 위용&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;물론 배포가 된 후의 점수이고 &lt;code class=&quot;language-text&quot;&gt;localhost&lt;/code&gt;에서 Lighthouse를 실행해보면 점수가 처참합니다. 하지만 실제 유저가 보는 화면은 배포된 화면이기 때문에 로컬의 점수는 크게 신경쓰지 않아도 됩니다.&lt;/p&gt;
&lt;p&gt;다음은 세부적인 항목에 대해서 살펴보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;performance의-세부항목&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#performance%EC%9D%98-%EC%84%B8%EB%B6%80%ED%95%AD%EB%AA%A9&quot; aria-label=&quot;performance의 세부항목 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Performance의 세부항목&lt;/h2&gt;
&lt;p&gt;Lighthouse는 성능을 측정하기 위해 다음의 메트릭을 사용합니다.&lt;/p&gt;
&lt;h3 id=&quot;metrics&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#metrics&quot; aria-label=&quot;metrics permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Metrics&lt;/h3&gt;
&lt;p&gt;퍼포먼스의 측정 지표라고 생각하면 됩니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;First Contentful Paint(FCP): 사용자가 특정 웹 페이지로 이동했을 때, 브라우저가 첫 번째 DOM의 콘텐츠를 렌더링하는 데 걸리는 시간&lt;/li&gt;
&lt;li&gt;Time to Interactive(TTI): 웹 페이지가 완전히 상호작용을 할 수 있는 상태가 될 때까지 걸리는 시&lt;/li&gt;
&lt;li&gt;Speed Index: 웹 페이지를 불러올 때, 콘텐츠가 시각적으로 표기되는 데까지 걸리는 시간&lt;/li&gt;
&lt;li&gt;Total Blocking Time(TBT): 웹 페이지가 사용자 입력에 응답하지 못하도록 차단된 총 시간(로딩 중 메인 쓰레드가 긴 시간동안 중단되어 응답을 받을 수 없을 정도로 걸린 시간)&lt;/li&gt;
&lt;li&gt;Largest Contentful Paint(LCP): 뷰포트에서 가장 큰 콘텐츠 요소가 화면에 렌더링 될 때까지 걸리는 시간&lt;/li&gt;
&lt;li&gt;Cumulative Layout Shift(CLS): 이미지/광고의 느린 로딩, 비동기 동작, 동적 DOM 변경 등으로 웹 페이지의 레이아웃이 얼마나 변하는 지 측정한 값. 사용자가 잘못된 클릭을 하도록 유발하는 시각적 불안전성을 체크하는 지표&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;opportunities&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#opportunities&quot; aria-label=&quot;opportunities permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Opportunities&lt;/h3&gt;
&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60685930/138121241-1515b72a-ecbc-4473-adbd-b07d10adaaee.png&quot;&gt;&lt;/div&gt;
&lt;p&gt;설명에 나오듯이 아래 제안을 따르면 페이지 로드를 빠르게 도와줄 수 있다고 합니다. 하지만 퍼포먼스 점수에는 영향을 미치지 않습니다.
저의 경우에는 사용하지 않는 자바스크립트 파일을 줄이고 용량을 조금 더 줄이라고 하네요.&lt;/p&gt;
&lt;h3 id=&quot;diagnostic&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#diagnostic&quot; aria-label=&quot;diagnostic permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Diagnostic&lt;/h3&gt;
&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60685930/138121953-ed8fb2f2-e5b9-4ddb-a223-f81fe3eb237c.png&quot;&gt;&lt;/div&gt;
&lt;p&gt;웹 페이지의 퍼포먼스와 관련한 더 많은 정보를 보여줍니다. 위의 Opportunities와 마찬가지로 퍼포먼스 점수에 영향을 주지 않습니다.
토글 버튼을 클릭하면 어떤 부분을 개선해 볼 수 있는지 확인할 수 있습니다. 저의 경우에는 웹 폰트와 관련해서 조금 더 개선할 수 있지만 꼭 써야하는 폰트이기에 어쩔 수 없이 그대로 두고 있습니다.
경량화 폰트를 제공한다거나 폰트를 &lt;code class=&quot;language-text&quot;&gt;preload&lt;/code&gt;하는 방식으로 성능을 개선해볼 수 있을 것 같습니다.&lt;/p&gt;
&lt;h2 id=&quot;그-밖의-항목&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B7%B8-%EB%B0%96%EC%9D%98-%ED%95%AD%EB%AA%A9&quot; aria-label=&quot;그 밖의 항목 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;그 밖의 항목&lt;/h2&gt;
&lt;h3 id=&quot;accessibility&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#accessibility&quot; aria-label=&quot;accessibility permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Accessibility&lt;/h3&gt;
&lt;p&gt;이 항목은 웹 접근성을 체크하는 항목입니다. &lt;code class=&quot;language-text&quot;&gt;img&lt;/code&gt;태그에 &lt;code class=&quot;language-text&quot;&gt;alt&lt;/code&gt;속성이 있는지 &lt;code class=&quot;language-text&quot;&gt;head&lt;/code&gt;태그에 &lt;code class=&quot;language-text&quot;&gt;title&lt;/code&gt;태그 등이 있는지를 확인합니다.&lt;/p&gt;
&lt;h3 id=&quot;best-practices&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#best-practices&quot; aria-label=&quot;best practices permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Best Practices&lt;/h3&gt;
&lt;p&gt;이 항목은 해당 웹 페이지가 웹 표준 모범 사례를 따르고 있는지를 확인하는 항목입니다. 콘솔에 에러가 출력되지는 않는지, HTTPS를 통해 해당 페이지에 접근할 수 있는지와 같은 부분을 확인합니다.&lt;/p&gt;
&lt;h3 id=&quot;seo&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#seo&quot; aria-label=&quot;seo permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SEO&lt;/h3&gt;
&lt;p&gt;이 항목은 웹 페이지가 검색 엔진에 대해 최적화된 순위 결과를 가지고 있는지 확인합니다. 각 사용자가 자신의 디바이스를 이용하여 웹 페이지에 접근하였을 때 콘텐츠를 읽는 데
무리가 없는 글꼴 크기를 사용하는지, 웹 페이지의 &lt;code class=&quot;language-text&quot;&gt;robots.txt&lt;/code&gt;파일이 유효한지 등을 확인합니다.&lt;/p&gt;
&lt;h3 id=&quot;pwa&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#pwa&quot; aria-label=&quot;pwa permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;PWA&lt;/h3&gt;
&lt;p&gt;Progressive Web App을 정의하는 일련의 기준에 따라 웹 페이지를 확인합니다. 이 항목은 해당 웹 페이지가 기준을 따르고 있는지 측정하여 점수를 부여하는 것이 아닙니다.
웹이 HTTP를 HTTPS로 리다이렉션 하는지, 응답 코드는 명확한지, 3G 네트워크 상태에서도 로딩이 빠르게 이루어지는지 같은 여부를 검사하여 합격 또는 실패를 부여합니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[브라우저는 어떻게 동작하나요?]]></title><description><![CDATA[…]]></description><link>https://yeongjae-shin.github.io/CS/브라우저의-동작-원리/</link><guid isPermaLink="false">https://yeongjae-shin.github.io/CS/브라우저의-동작-원리/</guid><pubDate>Sun, 10 Oct 2021 00:11:39 GMT</pubDate><content:encoded>&lt;img src=&quot;https://user-images.githubusercontent.com/60685930/136682489-f7146f9c-b9c4-4543-8f76-8659d9cf5975.png&quot;&gt;
2021년 10월 기준 크롬이 무려 65.05%의 점유율을 차지하고 있다. 우리나라의 경우를 생각해보면 인터넷 익스플로러(IE)부터 시작해서 크롬으로 옮겨가기 까지
많은 우여곡절이 있었던 것 같다. 나는 크롬이 출시되자마자 썼던 걸로 기억하는데 정부에서 제공하는 서비스를 이용할 수가 없어서 불편했던 기억이 있는데 이제는 크롬에서도 잘 동작하는것을 보면
정말 많이 변했구나 생각이 든다.
&lt;p&gt;각설하고 이렇듯 브라우저라는 것이 웹에 있어서 뗄래야 뗄 수 없는 그런 존재이다. 그럼 과연 브라우저는 어떻게 동작을 하는지 알아보자.&lt;/p&gt;
&lt;h1 id=&quot;브라우저&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80&quot; aria-label=&quot;브라우저 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;브라우저&lt;/h1&gt;
&lt;h2 id=&quot;주요-기능&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A3%BC%EC%9A%94-%EA%B8%B0%EB%8A%A5&quot; aria-label=&quot;주요 기능 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;주요 기능&lt;/h2&gt;
&lt;p&gt;브라우저의 주요 기능은 사용자가 선택한 자원을 서버에 요청하고 브라우저에 표시하는 것이다. 자원은 보통 HTML 문서이지만, PDF나 이미지 또는 다른 형태일 수 있다.
자원의 주소는 URI(Uniform Resource Identifier)에 의해 정해진다.&lt;/p&gt;
&lt;h2 id=&quot;구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;구조 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;구조&lt;/h2&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
    &lt;figure&gt;
        &lt;img src=&quot;https://d2.naver.com/content/images/2015/06/helloworld-59361-1.png&quot;&gt;
        &lt;figcaption&gt;브라우저의 주요 구성 요소&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;브라우저를 구성하고 있는 요소는 다음과 같다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;사용자 인터페이스: 요청한 페이지를 보여주는 창을 제외한 나머지 부분 (ex: 주소 표시줄, 북마크 등)&lt;/li&gt;
&lt;li&gt;브라우저 엔진: 사용자 인터페이스와 렌더링 엔진 사이의 동작 제. HTML 문서와 기타 자원의 웹 페이지를 사용자의 장치에 상호작용적인 시각 표현으로 변환&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;렌더링 엔진: 요청한 콘텐츠를 표시. HTML을 요청하면 HTML과 CSS를 파싱하여 화면에 표시함.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;게코(Gecko)엔진: 파이어폭스&lt;/li&gt;
&lt;li&gt;웹킷(Webkit)엔진: 사파리, 크롬&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;통신: HTTP 요청과 같은 네트워크 호출에 사용되며 이것은 플랫폼의 독립적인 인터페이스이고 각 플랫폼 하부에서 실행됨.&lt;/li&gt;
&lt;li&gt;UI 백엔드: 콤보 박스와 창 같은 기본적인 장치를 그림. 플랫폼에서 명시하지 않은 일반적인 인터페이스로서, OS 사용자 인터페이스 체계를 사용&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;자바스크립트 해석기: 자바스크립트 코드를 해석하고 결과를 렌더링 엔진으로 처리하는 자바스크립트 엔진&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;크롬: V8(Chromium 프로젝트의 일환으로 구글에서 자체 개발)&lt;/li&gt;
&lt;li&gt;파이어폭스: SpiderMonkey(역사상 최초의 자바스크립트 엔진)&lt;/li&gt;
&lt;li&gt;사파리: 니트로(구 SquirrelFish)&lt;/li&gt;
&lt;li&gt;엣지: 차크라&lt;/li&gt;
&lt;li&gt;오페라: V8&lt;/li&gt;
&lt;li&gt;IE: 차크라&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;자료 저장소: localStorage, IndexedDB 같은 스토리지 메커니즘 지원. 브라우저가 설치된 컴퓨터의 로컬 드라이브에 생성된 작은 데이터베이스.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;크롬은 대부분의 브라우저와 달리 각 탭마다 별도의 렌더링 엔진 인스턴스를 유지한다. 각 탭은 독립된 프로세스로 처리된다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;동작-과정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8F%99%EC%9E%91-%EA%B3%BC%EC%A0%95&quot; aria-label=&quot;동작 과정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;동작 과정&lt;/h2&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
    &lt;figure&gt;
        &lt;img src=&quot;https://d2.naver.com/content/images/2015/06/helloworld-59361-2.png&quot;&gt;
        &lt;figcaption&gt;렌더링 엔진의 동작 과정&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;HTML 문서를 파싱하여 &lt;strong&gt;DOM 트리&lt;/strong&gt;를 생성한다.&lt;/li&gt;
&lt;li&gt;CSS 파일과 함께 포함된 스타일 요소를 파싱하여 &lt;strong&gt;CSSOM 트리&lt;/strong&gt;를 생성한다.&lt;/li&gt;
&lt;li&gt;만들어진 DOM 트리와 CSSOM 트리를 결합하여 &lt;strong&gt;렌더 트리&lt;/strong&gt;를 생성한다.&lt;/li&gt;
&lt;li&gt;렌더 트리를 배치한다. 이것은 각 노드가 화면의 정확한 위치에 표시되는 것을 의미한다.&lt;/li&gt;
&lt;li&gt;렌더 트리를 그린다. UI 백엔드에서 랜더 트리의 각 노드를 가로지르며 렌더링한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;위 과정들은 &lt;strong&gt;점진적으로 진행&lt;/strong&gt;된다. 실제로 브라우저는 8KB 청크의 데이터를 수신하고 전체 HTML 페이지가 로드될 때까지 기다리지 않고 조금씩 렌더링을 시작한다.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
    &lt;figure&gt;
        &lt;img src=&quot;https://miro.medium.com/max/700/1*2_BpD1fDel_uSNhCbN1TrQ.png&quot;&gt;
        &lt;figcaption&gt;실제 렌더링 과정을 나타낸 이미지&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;
&lt;h3 id=&quot;1-domdocument-object-model트리-생성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-domdocument-object-model%ED%8A%B8%EB%A6%AC-%EC%83%9D%EC%84%B1&quot; aria-label=&quot;1 domdocument object model트리 생성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. DOM(Document Object Model)트리 생성&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token doctype&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;token doctype-tag&quot;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&quot;token name&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;viewport&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;width=device-width,initial-scale=1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;style.css&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;stylesheet&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Critical Path&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Hello &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;web performance&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; students!&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;awesome-photo.jpg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
    &lt;figure&gt;
        &lt;img src=&quot;https://i.imgur.com/lOHM4bV.png&quot;&gt;
        &lt;figcaption&gt;HTML 파싱 과정&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;HTML 페이지는 바이트를 문자로 변환하여 토큰화 =&gt; 노드로 변환 =&gt; DOM 트리 생성 과정을 거치게 된다.
DOM 트리는 렌더링될 때 어떻게 표시할지는 알려주지 않는데, 그 정보는 CSSOM이 알려준다.&lt;/p&gt;
&lt;h3 id=&quot;2-cssomcss-object-model트리-생성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-cssomcss-object-model%ED%8A%B8%EB%A6%AC-%EC%83%9D%EC%84%B1&quot; aria-label=&quot;2 cssomcss object model트리 생성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. CSSOM(CSS Object Model)트리 생성&lt;/h3&gt;
&lt;p&gt;렌더링 엔진은 위에서 아래로 HTML 문서를 파싱하는데 이 때, &lt;code class=&quot;language-text&quot;&gt;&amp;lt;style&gt;&lt;/code&gt;요소를 만나면 즉시 그 안의 CSS를 파싱한다.
HTML 문서의 파싱을 중단하고 CSS 룰셋을 파싱하는데 집중한다. CSS 파싱이 끝나면 다시 HTML 파싱으로 돌아간다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
   &lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 16px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
   &lt;span class=&quot;token property&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; bold&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
   &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; red&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;p span&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
   &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
   &lt;span class=&quot;token property&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; right&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;CSS 또한 HTML과 마찬가지로 바이트를 문자로 변환 =&gt; 토큰화 =&gt; 노드로 변환 =&gt; CSSOM 트리 구축 과정을 거치게 된다.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
    &lt;figure&gt;
        &lt;img src=&quot;https://i.imgur.com/gPFdcFS.png&quot;&gt;
        &lt;figcaption&gt;CSS 파싱 과정&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;CSSOM이 트리 구조를 갖는 이유는 스타일은 &lt;strong&gt;하향식&lt;/strong&gt;으로 규칙을 적용하게 된다. 페이지의 객체에 있는 스타일을 계산할 때, 브라우저는 해당 노드에 적용 가능한 가장 일반적인 규칙에서 더욱 구체적인 규칙을 적용하게 된다.&lt;/li&gt;
&lt;li&gt;위 트리는 완전한 CSSOM 트리가 아닌데 그 이유는 브라우저가 기본적으로 제공하는 &lt;code class=&quot;language-text&quot;&gt;user agent styles&lt;/code&gt;에서 스타일 시트가 재정의 하도록 결정한 스타일만 표시하기 때문이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-렌더-트리-생성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EB%A0%8C%EB%8D%94-%ED%8A%B8%EB%A6%AC-%EC%83%9D%EC%84%B1&quot; aria-label=&quot;3 렌더 트리 생성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 렌더 트리 생성&lt;/h3&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
    &lt;figure&gt;
        &lt;img src=&quot;https://i.imgur.com/9iB4RPE.png&quot;&gt;
        &lt;figcaption&gt;렌더 트리 생성 과정&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;먼저 &lt;strong&gt;DOM 트리와 CSSOM 트리를 결합하여 렌더 트리를 형성&lt;/strong&gt;한다.&lt;/li&gt;
&lt;li&gt;렌더 트리에는 페이지를 렌더링하는데 필요한 노드만 포함된다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;렌더 트리는 페이지에 표시되는 모든 DOM 콘텐츠와 각 노드에 대한 모든 스타일 정보를 갖고 있다.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DOM 트리의 루트에서 시작하여 순회하는데 이 때 렌더링이 되지 않는 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;script&gt;&lt;/code&gt;나 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;meta&gt;&lt;/code&gt;태그와 같은 노드들은 렌더 트리에서 생략된다.
일부 노드는 CSS를 통해 숨겨지며 렌더 트리에서도 생략된다. 예를 들면, &lt;code class=&quot;language-text&quot;&gt;display: none&lt;/code&gt;속성을 갖는 노드는 렌더 트리에서 생략된다.
이후 표시된 각 노드에 대해 매칭되는 CSSOM 규칙을 찾고 적용한다. 마지막으로 표시된 노드를 콘텐츠와 스타일과 함께 내보내게 된다.&lt;/p&gt;
&lt;h3 id=&quot;4-렌더-트리-배치&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EB%A0%8C%EB%8D%94-%ED%8A%B8%EB%A6%AC-%EB%B0%B0%EC%B9%98&quot; aria-label=&quot;4 렌더 트리 배치 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 렌더 트리 배치&lt;/h3&gt;
&lt;p&gt;배치는 보통 다음과 같은 형태로 진행된다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;부모 렌더러가 자신의 너비를 결정&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;부모가 자식을 검토&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;자식 렌더러를 배치(자식와 x와 y를 설정)&lt;/li&gt;
&lt;li&gt;필요하다면 자식 배치를 호출하여 자식의 높이를 계산&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;부모는 자식의 누적된 높이와 여백, 패딩을 사용하여 자신의 높이 설정. 이 값은 부모 렌더러의 부모가 사용하게 됨&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;뷰포트 내에서 노드의 정확한 위치와 크기를 계산하는데, 페이지 내에서 각 객체의 정확한 위치와 크기를 계산하기 위해, 브라우저는 렌더 트리의 루트에서 시작하여 트리를 순회함.
레이아웃 과정의 결과는 &lt;strong&gt;Box Model&lt;/strong&gt;이다. 박스 모델은 뷰포트 내에서 각 노드의 정확한 위치와 크기 정보를 담고 있다. 모든 상대적인 측정값은 화면에서 &lt;strong&gt;절대적인 픽셀&lt;/strong&gt;로 변환된다.&lt;/p&gt;
&lt;h3 id=&quot;5-랜더-트리-그리기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-%EB%9E%9C%EB%8D%94-%ED%8A%B8%EB%A6%AC-%EA%B7%B8%EB%A6%AC%EA%B8%B0&quot; aria-label=&quot;5 랜더 트리 그리기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. 랜더 트리 그리기&lt;/h3&gt;
&lt;p&gt;마지막으로, 렌더 트리의 각 노드를 화면에서의 실제 픽셀로 변환한다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;reference&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://d2.naver.com/helloworld/59361&quot;&gt;https://d2.naver.com/helloworld/59361&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://poiemaweb.com/js-browser&quot;&gt;https://poiemaweb.com/js-browser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/web-god-mode/how-web-browsers-work-behind-the-scene-architecture-technologies-and-internal-working-fec601488bfa&quot;&gt;https://medium.com/web-god-mode/how-web-browsers-work-behind-the-scene-architecture-technologies-and-internal-working-fec601488bfa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://velog.io/@yejineee/%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EB%8F%99%EC%9E%91-%EA%B3%BC%EC%A0%95&quot;&gt;https://velog.io/@yejineee/브라우저-동작-과정&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[프로세스와 쓰레드에 대해]]></title><description><![CDATA[…]]></description><link>https://yeongjae-shin.github.io/CS/프로세스와-쓰레드에-대해/</link><guid isPermaLink="false">https://yeongjae-shin.github.io/CS/프로세스와-쓰레드에-대해/</guid><pubDate>Sat, 09 Oct 2021 21:10:12 GMT</pubDate><content:encoded>&lt;h1 id=&quot;프로세스&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4&quot; aria-label=&quot;프로세스 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로세스&lt;/h1&gt;
&lt;p&gt;프로세스는 운영체제 위에서 연속적으로 실행되고 있는 프로그램이다. 지금 내가 글을 쓰고 있는 웹스톰도 하나의 프로세스
이 글을 읽을 수 있는 크롬도 하나의 프로세스 이다. 현재 실행중인 프로그램 모두 프로세스를 가지고 있다.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;https://media.vlpt.us/images/nowhhk/post/123d62e4-0fde-454b-b690-60ec9c7b83db/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-08-15%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%209.14.50.png&quot;&gt;&lt;/div&gt;
&lt;p&gt;각 프로세스는 메모리 위에서 독립적으로 실행된다. 프로세스는 격리된 실행 개체이며 데이터 및 정보를 공유하지 않는다.
따라서 어떤 프로세스에서 문제가 발생한다면 해당 프로세스만 죽게된다.&lt;/p&gt;
&lt;p&gt;프로세스는 통신을 위해 IPC(Inter-Process Communication) 메커니즘을 사용한다.&lt;/p&gt;
&lt;p&gt;프로세스에는 프로그램을 위해 작성된 &lt;code class=&quot;language-text&quot;&gt;Code&lt;/code&gt;가 있고, 그 안에 함수들이 어떤 순서로 실행되어야 하는지 함수가 끝나면 어디로 돌아가야하는지 에 대한 정보가 있는 &lt;code class=&quot;language-text&quot;&gt;Stack&lt;/code&gt;이 있다.
그리고 우리가 오브젝트를 생성하거나 데이터를 만들 때 데이터들이 저장되는 공간인 &lt;code class=&quot;language-text&quot;&gt;Heap&lt;/code&gt;이 있다. &lt;code class=&quot;language-text&quot;&gt;Heap&lt;/code&gt;에는 동적으로 할당된 변수가 저장되고, &lt;code class=&quot;language-text&quot;&gt;Data&lt;/code&gt;에는 전역 변수나 스태틱 변수들이 할당된다.&lt;/p&gt;
&lt;h1 id=&quot;쓰레드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%93%B0%EB%A0%88%EB%93%9C&quot; aria-label=&quot;쓰레드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;쓰레드&lt;/h1&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;https://media.vlpt.us/images/nowhhk/post/97a091c0-1dd3-48f1-8c64-5eef5499578e/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-08-15%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%209.23.09.png&quot;&gt;&lt;/div&gt;
&lt;p&gt;쓰레드는 프로세스의 일부인 실행 단위이다. 프로세스는 동시에 실행되는 여러 개의 쓰레드를 가질 수 있다. 쓰레드는 각각 해야하는 업무를 배정 받는다.
이 쓰레드는 자기들이 수행해야하는 함수의 호출을 기억해야 하기 때문에 쓰레드마다 스택이 할당되어 있다.
하지만 프로세스 안에서 동작하는 쓰레드들은 결국 한 프로그램을 위해 일하기 때문에 프로세스에 지정된 코드와 데이터, 힙들에 접근해서 공통적으로 업데이트가 가능하다.&lt;/p&gt;
&lt;p&gt;쉽게 말하면 크롬에서 유튜브를 통해 음악을 들으면서 블로그를 읽을 수 있는 것은 음악을 재생하는 쓰레드 하나, 블로그 글을 읽는 쓰레드 하나가 존재하기 때문이다라고 할 수 있다.&lt;/p&gt;
&lt;h1 id=&quot;프로세스-vs-쓰레드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-vs-%EC%93%B0%EB%A0%88%EB%93%9C&quot; aria-label=&quot;프로세스 vs 쓰레드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로세스 vs 쓰레드&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;프로세스&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;쓰레드&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;정의&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;프로세스는 프로그램이 실행 중임을 의미함&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;쓰레드는 프로세스의 한 부분을 의미함&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;무게&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;프로세스는 무거움&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;쓰레드는 가벼움&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;종료까지 걸리는 시간&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;프로세스는 더 많은 시간이 걸림&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;쓰레드는 비교적 덜 걸림&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;생성 시간&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;프로세스는 더 많은 시간이 걸림&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;쓰레드는 비교적 덜 걸림&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;통신&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;프로세스간의 통신은 쓰레드보다 더 많은 시간이 걸림&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;쓰레드간의 통신은 프로세스에 비해 덜 걸림&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;리소스&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;프로세스가 더 많은 리소스를 소비함&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;쓰레드는 더 적은 리소스를 소비함&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;메모리 공유&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;프로세스는 격리되어 있음&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;쓰레드는 서로 메모리를 공유함&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;데이터 공유&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;프로세스는 공유하지 않음&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;쓰레드는 서로 데이터를 공유함&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content:encoded></item><item><title><![CDATA[가비지컬렉터의 역할과 동작방식]]></title><description><![CDATA[TL;DR 가비지컬렉터의 역할은 자바스크립트 엔진이 메모리 할당을 모니터링하고 할당된 메모리의 블록이 더 이상 필요하지 않은 시점을 확인하여 회수하는 것이다. 가비지컬렉터는 알고리즘과  알고리즘에 따라 동작한다. 참조-세기(Reference…]]></description><link>https://yeongjae-shin.github.io/JavaScript/가비지컬렉터의-역할과-동작방식/</link><guid isPermaLink="false">https://yeongjae-shin.github.io/JavaScript/가비지컬렉터의-역할과-동작방식/</guid><pubDate>Sat, 09 Oct 2021 15:11:28 GMT</pubDate><content:encoded>&lt;h1 id=&quot;tldr&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tldr&quot; aria-label=&quot;tldr permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TL;DR&lt;/h1&gt;
&lt;p&gt;가비지컬렉터의 역할은 자바스크립트 엔진이 메모리 할당을 모니터링하고 할당된 메모리의 블록이 더 이상 필요하지 않은 시점을 확인하여 회수하는 것이다.&lt;/p&gt;
&lt;p&gt;가비지컬렉터는 &lt;code class=&quot;language-text&quot;&gt;Reference-counting&lt;/code&gt;알고리즘과 &lt;code class=&quot;language-text&quot;&gt;Mark-and-sweep&lt;/code&gt; 알고리즘에 따라 동작한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;참조-세기(Reference-counting)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;참조-세기는 더 이상 필요없는 오브젝트를 어떤 다른 오브젝트도 참조하지 않는 오브젝트라고 정의한다. 이 오브젝트를 &lt;code class=&quot;language-text&quot;&gt;가비지&lt;/code&gt;라고 부르며, 이를 참조하는 다른 오브젝트가 하나도 없는 경우 수집이 가능하다.&lt;/li&gt;
&lt;li&gt;이 알고리즘은 순환 참조의 문제점을 가지고 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;표시하고-쓸기(Mark-and-sweep)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mark: 객체가 생성될 때마다 &lt;code class=&quot;language-text&quot;&gt;mark bit&lt;/code&gt;가 &lt;code class=&quot;language-text&quot;&gt;0(false)&lt;/code&gt;으로 설정된다. &lt;code class=&quot;language-text&quot;&gt;mark&lt;/code&gt; 단계에서 접근 가능한 객체의 &lt;code class=&quot;language-text&quot;&gt;mark bit&lt;/code&gt;가 &lt;code class=&quot;language-text&quot;&gt;1(true)&lt;/code&gt;로 설정된다.&lt;/li&gt;
&lt;li&gt;Sweep: &lt;code class=&quot;language-text&quot;&gt;mark&lt;/code&gt; 단계 후 &lt;code class=&quot;language-text&quot;&gt;mark bit&lt;/code&gt;가 여전히 &lt;code class=&quot;language-text&quot;&gt;0&lt;/code&gt;으로 설정된 객체들은 도달할 수 없는 객체이므로 가비지컬렉터가 수집해 메모리에서 해제된다.&lt;/li&gt;
&lt;li&gt;이 알고리즘은 &lt;code class=&quot;language-text&quot;&gt;참조-세기&lt;/code&gt;알고리즘의 문제점을 보완할 수 있어 2012년 이후 대부분의 브라우저에서 채택하고 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;가비지컬렉션은 자동으로 실행되며 강제로 멈추거나 실행시킬 수 없다.&lt;/p&gt;
&lt;h1 id=&quot;자바스크립트의-메모리-관리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B4%80%EB%A6%AC&quot; aria-label=&quot;자바스크립트의 메모리 관리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자바스크립트의 메모리 관리&lt;/h1&gt;
&lt;p&gt;C 언어 같은 저수준(로우레벨) 언어에서는 메모리 관리를 위해 &lt;code class=&quot;language-text&quot;&gt;malloc()&lt;/code&gt;과 &lt;code class=&quot;language-text&quot;&gt;free()&lt;/code&gt;를 사용한다고 합니다. 반면에, 자바스크립트는 눈에 보이지 않는 곳에서 메모리 관리를 수행합니다.
객체가 생성되었을 때 자동으로 메모리를 할당하고 쓸모 없어졌을 때 자동으로 해제합니다.(&lt;em&gt;가비지 컬렉션&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;원시값, 객체, 함수 등 우리가 만드는 모든 것은 메모리를 차지합니다. 그럼 쓸모 없어지게 된 것들은 자동으로 해제 된다는데 어떤 기준에 의해 해제되는 것일까요?&lt;/p&gt;
&lt;h1 id=&quot;가비지컬렉션&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%80%EB%B9%84%EC%A7%80%EC%BB%AC%EB%A0%89%EC%85%98&quot; aria-label=&quot;가비지컬렉션 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;가비지컬렉션&lt;/h1&gt;
&lt;p&gt;자바스크립트의 가비지컬렉션 기준을 알아보기 전에 메모리의 생존주기와 자바스크립트에서의 메모리 할당 대해 알아보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;메모리의-생존주기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A9%94%EB%AA%A8%EB%A6%AC%EC%9D%98-%EC%83%9D%EC%A1%B4%EC%A3%BC%EA%B8%B0&quot; aria-label=&quot;메모리의 생존주기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;메모리의 생존주기&lt;/h2&gt;
&lt;p&gt;메모리의 생존주기는 저수준 언어, 고수준 언어와 관계없이 비슷합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;필요할 때 할당한다.&lt;/li&gt;
&lt;li&gt;사용한다. (읽기, 쓰기)&lt;/li&gt;
&lt;li&gt;필요없어지면 해제한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;2번은 모든 언어에서 명시적으로 사용되지만 1번과 3번은 저수준 언어에서는 명시적이며, 자바스크립트와 같은 고수준(하이레벨) 언어에서는 암묵적으로 작동합니다.&lt;/p&gt;
&lt;h2 id=&quot;자바스크립트에서의-메모리-할당&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%97%90%EC%84%9C%EC%9D%98-%EB%A9%94%EB%AA%A8%EB%A6%AC-%ED%95%A0%EB%8B%B9&quot; aria-label=&quot;자바스크립트에서의 메모리 할당 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자바스크립트에서의 메모리 할당&lt;/h2&gt;
&lt;h3 id=&quot;값-초기화&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%92-%EC%B4%88%EA%B8%B0%ED%99%94&quot; aria-label=&quot;값 초기화 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;값 초기화&lt;/h3&gt;
&lt;p&gt;프로그래머가 일일이 메모리를 할당 하지 않도록 하기 위해서 자바스크립트는 값 초기화를 할 때 자동으로 메모리를 할당합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 정수를 담기 위한 메모리 할당&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; str &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;123&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 문자열을 담기 위한 메모리 할당&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; obj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  a&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  b&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 객체와 객체에 포함된 값들을 담기 위한 메모리 할당&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; arr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;123&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 배열과 배열에 담긴 값들을 위한 메모리 할당&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 함수를 위한 할당(함수는 호출 가능한 객체입니다)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 함수표현식 또한 객체를 담기위한 메모리를 할당합니다&lt;/span&gt;
someElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;click&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  someElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;style&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;backgroundColor &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;red&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;함수-호출을-통한-할당&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%A8%EC%88%98-%ED%98%B8%EC%B6%9C%EC%9D%84-%ED%86%B5%ED%95%9C-%ED%95%A0%EB%8B%B9&quot; aria-label=&quot;함수 호출을 통한 할당 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;함수 호출을 통한 할당&lt;/h3&gt;
&lt;p&gt;함수 호출의 결과 메모리 할당이 일어나기도 합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; date &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Date 객체를 위해 메모리 할당&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; el &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;div&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// DOM Element를 위해 메모리 할당&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;메소드가 새로운 값이나 객체를 할당하기도 합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; str &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;123&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; str2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; str&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// str2 새로운 문자열&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 자바스크립트에서 문자열은 immutable 값이기 때문에&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 메모리를 새로 할당하지 않고 단순히 [0, 2] 이라는 범위만 저장합니다.&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; arr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;123&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;456&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; arr2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;789&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;101112&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; arr3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// arr과 arr2를 합친 4개의 원소를 가진 새로운 배열&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;자바스크립트의-가비지컬렉션-기준&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%EA%B0%80%EB%B9%84%EC%A7%80%EC%BB%AC%EB%A0%89%EC%85%98-%EA%B8%B0%EC%A4%80&quot; aria-label=&quot;자바스크립트의 가비지컬렉션 기준 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자바스크립트의 가비지컬렉션 기준&lt;/h1&gt;
&lt;p&gt;쉽게 말하면 어떤 값들이 더 이상 도달이 불가능한 경우 가비지컬렉션의 대상이 됩니다.&lt;/p&gt;
&lt;p&gt;자바스크립트는 &lt;code class=&quot;language-text&quot;&gt;도달 가능성(reachability)&lt;/code&gt;이라는 개념을 사용해 메모리 관리를 수행합니다.&lt;/p&gt;
&lt;p&gt;도달 가능한 값은 쉽게 말해 어떻게든 접근하거나 사용할 수 있는 값을 의미합니다. &lt;strong&gt;도달 가능한 값은 메모리에서 삭제되지 않습니다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;아래의 값들은 태생부터 도달 가능하기 때문에 이유 없이 삭제되지 않습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;현재 함수의 지역 변수와 매개변수&lt;/li&gt;
&lt;li&gt;중첩 함수의 체인에 있는 함수에서 사용되는 변수와 매개변수&lt;/li&gt;
&lt;li&gt;전역 변수&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이런 값은 &lt;code class=&quot;language-text&quot;&gt;루트(root)&lt;/code&gt;라고 부릅니다.
&lt;code class=&quot;language-text&quot;&gt;루트&lt;/code&gt;가 참조하는 값이나 체이닝으로 루트에서 참조할 수 있는 값은 도달 가능한 값이 됩니다.&lt;/p&gt;
&lt;p&gt;전역 변수에 객체가 저장되어있다고 가정해보면, 이 객체의 프로퍼티가 또 다른 객체를 참조하고 있다면, 프로퍼티가 참조하는 객체는 도달 가능한 값이 됩니다.
따라서 이 객체가 참조하는 다른 모든 것들도 도달 가능하다고 여겨집니다.&lt;/p&gt;
&lt;h1 id=&quot;내부-알고리즘&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%82%B4%EB%B6%80-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&quot; aria-label=&quot;내부 알고리즘 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;내부 알고리즘&lt;/h1&gt;
&lt;h2 id=&quot;1-참조-세기reference-counting-알고리즘&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%B0%B8%EC%A1%B0-%EC%84%B8%EA%B8%B0reference-counting-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&quot; aria-label=&quot;1 참조 세기reference counting 알고리즘 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 참조-세기(Reference-counting) 알고리즘&lt;/h2&gt;
&lt;h3 id=&quot;간단한-예시&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%98%88%EC%8B%9C&quot; aria-label=&quot;간단한 예시 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;간단한 예시&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// user엔 객체 참조 값이 저장됩니다.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; user &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;John&apos;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;https://ko.javascript.info/article/garbage-collection/memory-user-john.svg&quot;&gt;&lt;/div&gt;
&lt;p&gt;이 그림에서 화살표는 객체 참조를 나타냅니다. 전역 변수 &lt;code class=&quot;language-text&quot;&gt;user&lt;/code&gt;는 &lt;code class=&quot;language-text&quot;&gt;{ name: &apos;John&apos; }&lt;/code&gt;이라는 객체를 참조합니다.
&lt;code class=&quot;language-text&quot;&gt;user&lt;/code&gt;의 값을 다른 값으로 덮어쓰면 참조가 사라집니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;user &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;https://ko.javascript.info/article/garbage-collection/memory-user-john-lost.svg&quot;&gt;&lt;/div&gt;
&lt;p&gt;John은 도달할 수 없는 상태가 되었기 때문에 가비지 컬렉터(이하 GC)가 John에 저장된 데이터를 삭제하고, John을 메모리상에서 삭제합니다.&lt;/p&gt;
&lt;h3 id=&quot;참조-두-개&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%B0%B8%EC%A1%B0-%EB%91%90-%EA%B0%9C&quot; aria-label=&quot;참조 두 개 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;참조 두 개&lt;/h3&gt;
&lt;p&gt;참조를 &lt;code class=&quot;language-text&quot;&gt;user&lt;/code&gt;에서 &lt;code class=&quot;language-text&quot;&gt;admin&lt;/code&gt;으로 복사했다고 가정해봅시다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// user엔 객체 참조 값이 저장됩니다.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; user &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;John&apos;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; admin &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;https://ko.javascript.info/article/garbage-collection/memory-user-john-admin.svg&quot;&gt;&lt;/div&gt;
&lt;p&gt;그리고 위에서 한 것 처럼 &lt;code class=&quot;language-text&quot;&gt;user&lt;/code&gt;의 값을 다른 값으로 덮어써 봅니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;user &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;전역 변수 &lt;code class=&quot;language-text&quot;&gt;admin&lt;/code&gt;을 통하면 여전히 객체 John에 접근할 수 있기 때문에 John은 메모리상에서 삭제되지 않습니다. 이 상태에서 &lt;code class=&quot;language-text&quot;&gt;admin&lt;/code&gt;을 다른 값으로 덮어쓰면 John은 메모리상에서 삭제될 수 있습니다.&lt;/p&gt;
&lt;h3 id=&quot;연결된-객체&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%97%B0%EA%B2%B0%EB%90%9C-%EA%B0%9D%EC%B2%B4&quot; aria-label=&quot;연결된 객체 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;연결된 객체&lt;/h3&gt;
&lt;p&gt;조금 복잡한 예시가 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;marry&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;man&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; woman&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  woman&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;husband &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; man&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  man&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;wife &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; woman&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    father&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; man&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    mother&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; woman&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; family &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;marry&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;John&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Ann&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;메모리 구조는 아래와 같이 나타낼 수 있습니다.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;https://ko.javascript.info/article/garbage-collection/family.svg&quot;&gt;&lt;/div&gt;
&lt;p&gt;위 예시의 함수는 호출이되고 끝나서 더 이상 필요한 값이 아닌데도 파라미터로 받은 두 객체를 서로 참조하게 되면서(순환 참조) GC는 이 값들에 대한 메모리를 삭제하지 않아서 메모리에 계속 남아있게 됩니다.
&lt;strong&gt;순환참조는 메모리 누수를 일으키는 주된 요인이라고 할 수 있습니다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;참조 두 개를 지워보도록 하겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;delete&lt;/span&gt; family&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;father&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;delete&lt;/span&gt; family&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mother&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;husband&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;https://ko.javascript.info/article/garbage-collection/family-delete-refs.svg&quot;&gt;&lt;/div&gt;
&lt;p&gt;삭제한 두 개의 참조 중 하나만 지웠다면, 모든 객체가 여전히 도달 가능한 상태였지만 두 개를 지우면 John으로 들어오는 참조는 모두 사라져
John은 도달 가능한 상태에서 벗어나 GC에 의해 메모리상에서 삭제됩니다.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;https://ko.javascript.info/article/garbage-collection/family-no-father.svg&quot;&gt;&lt;/div&gt;
&lt;h3 id=&quot;도달할-수-없는-섬&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8F%84%EB%8B%AC%ED%95%A0-%EC%88%98-%EC%97%86%EB%8A%94-%EC%84%AC&quot; aria-label=&quot;도달할 수 없는 섬 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;도달할 수 없는 섬&lt;/h3&gt;
&lt;p&gt;객체들이 연결되어 섬 같은 구조를 만드는데, 이 섬에 도달할 수 없으면 섬을 구성하는 객체 전부 메모리상에서 삭제됩니다.
&lt;code class=&quot;language-text&quot;&gt;family&lt;/code&gt;가 아무것도 참조하지 않도록 만들어 봅시다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;family &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;https://ko.javascript.info/article/garbage-collection/family-no-family.svg&quot;&gt;&lt;/div&gt;
&lt;p&gt;John과 Ann은 여전히 서로를 참조하고 있고, 두 객체 모두 외부에서 들어오는 참조를 가지고 있습니다.
하지만 &lt;code class=&quot;language-text&quot;&gt;fmaily&lt;/code&gt;객체와 루트의 연결이 사라지면 루트 객체를 참조하는 것이 아무것도 없게 됩니다. 섬 전체가 도달할 수 없는 상태가 되어
섬을 구성하는 객체 모두가 메모리상에서 삭제됩니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;도달할 수 없는 섬&lt;/strong&gt; 예제는 도달 가능성이라는 개념이 얼마나 중요한지 보여줍니다.&lt;/p&gt;
&lt;h2 id=&quot;2-표시하고-쓸기mark-and-sweep-알고리즘&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%ED%91%9C%EC%8B%9C%ED%95%98%EA%B3%A0-%EC%93%B8%EA%B8%B0mark-and-sweep-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&quot; aria-label=&quot;2 표시하고 쓸기mark and sweep 알고리즘 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 표시하고-쓸기(Mark-and-sweep) 알고리즘&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Mark-and-sweep&lt;/code&gt;알고리즘은 다음 단계를 거쳐 수행됩니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;GC는 루트 정보를 수집하고 이를 &lt;code class=&quot;language-text&quot;&gt;mark(표시)&lt;/code&gt;합니다.&lt;/li&gt;
&lt;li&gt;루트가 참조하고 있는 모든 객체를 방문하고 이것들을 &lt;code class=&quot;language-text&quot;&gt;mark&lt;/code&gt;합니다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;mark&lt;/code&gt;된 모든 객체에 방문하고 그 객체들이 참조하는 객체도 &lt;code class=&quot;language-text&quot;&gt;mark&lt;/code&gt;합니다. 한번 방문한 객체는 전부 &lt;code class=&quot;language-text&quot;&gt;mark&lt;/code&gt;하기 때문에 같은 객체를 다시 방문하지는 않습니다.&lt;/li&gt;
&lt;li&gt;루트에서 도달 가능한 모든 객체를 방문할 때까지 위의 과정을 반복합니다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;mark&lt;/code&gt;되지 않은 모든 객체를 메모리상에서 삭제합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;https://blog.kakaocdn.net/dn/qpGfK/btq5vOgrm2f/UHlxleW4Yg1y5GbOgdbk70/img.png&quot;&gt;&lt;/div&gt;
&lt;h3 id=&quot;간단한-예시-1&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%98%88%EC%8B%9C-1&quot; aria-label=&quot;간단한 예시 1 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;간단한 예시&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;couple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; John &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Ann &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token comment&quot;&gt;// John.girlFriend는 Ann을 참조한다. &lt;/span&gt;
  John&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;girlFriend &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Ann&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// Ann.boyFriend는 John을 참조한다.&lt;/span&gt;
  Ann&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;boyFriend &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; John&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;순환참조&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;couple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위 예시에서 &lt;code class=&quot;language-text&quot;&gt;couple()&lt;/code&gt;이라는 함수가 호출된 후 &lt;code class=&quot;language-text&quot;&gt;&apos;순환참조&apos;&lt;/code&gt;가 return 되고 함수가 끝난 후에는 더 이상 root에서 John과 Ann에 도달할 수 없기 때문에
해당 값들은 GC에 의해서 메모리상에서 삭제됩니다.&lt;/p&gt;
&lt;p&gt;2012년부터 모던 브라우저들은 대부분 GC에 &lt;code class=&quot;language-text&quot;&gt;Mark-and-sweep&lt;/code&gt;알고리즘을 사용합니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;reference&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Memory_Management&quot;&gt;https://developer.mozilla.org/ko/docs/Web/JavaScript/Memory_Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://javascript.info/garbage-collection&quot;&gt;https://javascript.info/garbage-collection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Garbage_collection_(computer_science&quot;&gt;https://en.wikipedia.org/wiki/Garbage_collection_(computer_science&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.geeksforgeeks.org/garbage-collection-in-javascript/&quot;&gt;https://www.geeksforgeeks.org/garbage-collection-in-javascript/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[NCP(Naver Cloud Platform)을 활용한 카카오 알림톡 보내기]]></title><description><![CDATA[이번에 알림톡을 이용해서 휴대폰 인증번호를 보내는 기능을 구현하기 위해 찾아보다 네이버 NCP(Naver Cloud Platform…]]></description><link>https://yeongjae-shin.github.io/기타/ncp(naver-cloud-platform)을-활용한-카카오-알림톡-보내기/</link><guid isPermaLink="false">https://yeongjae-shin.github.io/기타/ncp(naver-cloud-platform)을-활용한-카카오-알림톡-보내기/</guid><pubDate>Thu, 07 Oct 2021 23:11:35 GMT</pubDate><content:encoded>&lt;p&gt;이번에 알림톡을 이용해서 휴대폰 인증번호를 보내는 기능을 구현하기 위해 찾아보다 네이버 NCP(Naver Cloud Platform)을 이용해 알림톡 보내기가 가능하다 해서 작업해봤습니다.
&lt;a href=&quot;https://business.kakao.com/info/bizmessage/&quot;&gt;카카오 비즈니스&lt;/a&gt;에 따르면 알림톡 기능을 이용하기 위해서는 공식 딜러사를 통해 이용하도록 되어 있습니다.
저는 이 과정을 거치기엔 시간이 부족했기 때문에 바로 적용이 가능한 NCP를 이용했습니다.&lt;/p&gt;
&lt;p&gt;NCP를 이용해서 알림톡을 보내기 위해서는 선행되어야 할 조건이 &lt;strong&gt;하나&lt;/strong&gt; 있습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;회사의 카카오톡 비즈니스 채널 계정이 있어야 한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이 글은 이미 비즈니스 채널 계정이 존재한다는 가정하에 쓰는 것입니다.&lt;/p&gt;
&lt;p&gt;먼저, NCP 가입을 한 다음 알림톡을 보내기 위해 &lt;code class=&quot;language-text&quot;&gt;Simple &amp;amp; Easy Notification Service&lt;/code&gt;라는 서비스를 이용해야 합니다.
좌측 사이드바에 &lt;code class=&quot;language-text&quot;&gt;Products &amp;amp; Services&lt;/code&gt; 메뉴에서 찾아보실 수 있습니다.&lt;/p&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/60685930/136405328-b7e913dd-1890-45db-bbc7-3ff540bf7b0b.png&quot;&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Simple &amp;amp; Easy Notification Service&lt;/code&gt; 서비스에 들어가시면 먼저 해야할 것이 &lt;code class=&quot;language-text&quot;&gt;프로젝트 생성&lt;/code&gt;입니다.
아래 이미지와 같이 카카오 알림톡 서비스를 이용하기 위한 서비스 Type은 &lt;code class=&quot;language-text&quot;&gt;Biz Message&lt;/code&gt;를 선택하시고 프로젝트명을 적어주시면 됩니다.&lt;/p&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/60685930/136406169-59be380d-480e-4adb-b385-211b582302d6.png&quot;&gt;
&lt;p&gt;프로젝트 생성이 완료되면 서비스의 ID와 Secret Key를 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;그리고 API 사용을 위해 API 키를 생성해야 합니다. API 키를 생성하기 위해선 오른쪽 상단의 프로필 아이콘 클릭 후 계정 관리 -&gt; 인증키 관리에서 생성하실 수 있습니다.&lt;/p&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/60685930/136406719-4dfe015d-09a8-4e5d-8d62-44ab6cde3684.png&quot;&gt;
&lt;p&gt;API키 까지 생성하셨다면 다음으로 넘어가겠습니다.&lt;/p&gt;
&lt;p&gt;두 번째, &lt;code class=&quot;language-text&quot;&gt;Biz Message&lt;/code&gt;탭의 &lt;code class=&quot;language-text&quot;&gt;KakaoTalk Channel&lt;/code&gt; 메뉴로 이동합니다. 여기서 미리 만들어놓은 카카오 비즈니스 채널을 등록해야 합니다. 채널 등록은 어려운 부분이 없으니
넘어가도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;세 번째, 이제 템플릿을 등록해야 합니다. 알림톡은 등록된 템플릿을 기반으로 메세지를 보내게 되는데 이 부분이 조금 까다롭습니다. 템플릿을 등록한다고 바로 사용할 수 없고,
템플릿 검수 후에 사용할 수 있습니다. 템플릿 검수는 2일 ~ 3일정도 걸리는 것 같습니다. 템플릿 등록에서 중요한 부분은 템플릿 내용입니다.&lt;/p&gt;
&lt;p&gt;여기서 우리는 템플릿 변수를 사용할 수 있습니다. &lt;code class=&quot;language-text&quot;&gt;placeholder&lt;/code&gt;로도 확인 할 수 있지만, 변수를 사용하기 위해서는 다음과 같이 &lt;code class=&quot;language-text&quot;&gt;#{변수명}&lt;/code&gt;의 형태로 사용할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// 템플릿 예시

인증번호는 #{변수명} 입니다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;한 가지 팁을 드리자면, &lt;strong&gt;줄바꿈을 하기 위해서는 &lt;code class=&quot;language-text&quot;&gt;\n&lt;/code&gt;의 형태로 등록해야 합니다. 그냥 엔터로 등록하면 줄바꿈이 적용되지 않습니다.&lt;/strong&gt;
저 처럼 실수해서 템플릿 두 개 등록하지 마세요… ㅠㅠ&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// 줄바꿈 예시

[줄바꿈 예시]\n\n인증번호는 #{변수명} 입니다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;예시와 같이 등록을 해야&lt;/p&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/60685930/136572698-6193f6d1-cb65-4daa-955e-2c133cb40feb.jpeg&quot;&gt;
&lt;p&gt;위의 형태로 정상적으로 줄바꿈이 되어 메세지가 날아옵니다.&lt;/p&gt;
&lt;p&gt;NCP에서는 Swagger 문서를 제공하기 때문에 쉽게 테스트를 해볼 수 있는데요, 테스트 하기전 &lt;a href=&quot;https://api.ncloud-docs.com/docs/ko/ai-application-service-sens-alimtalkv2&quot;&gt;API 가이드 문서&lt;/a&gt;를 보면 body에 필수로 들어가야하는 필드가 무엇인지 알 수 있습니다.&lt;/p&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/60685930/136573169-88904614-8364-47ce-a868-b16ad2f4d0da.png&quot;&gt;
&lt;p&gt;&lt;strong&gt;위 사진에서 &lt;code class=&quot;language-text&quot;&gt;Mandatory&lt;/code&gt;라고 되어있는 값들이 필수로 들어가야하는 값들입니다.&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;참고로 failover 설정은 NCP에서 못하고 카카오 비즈니스 채널 관리 페이지에서 설정해야 합니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;저처럼 인증번호용으로 사용하기 위해 버튼이 필요 없으신 분들은 &lt;code class=&quot;language-text&quot;&gt;messages.buttons&lt;/code&gt;를 &lt;code class=&quot;language-text&quot;&gt;빈 배열([])&lt;/code&gt;로 두시면 됩니다. 아 그리고 템플릿 검수가 통과하기 전엔 발송 테스트가 불가능합니다.&lt;/p&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/60685930/136574230-6a495a07-eac6-4bcc-8b78-df5402a6eaff.png&quot;&gt;
&lt;p&gt;요청은 성공하지만 발송은 실패 상태로 나오게 되니 템플릿 검수가 통과하기 전에 테스트 해보고 싶으신 분들은 요청 상태만 보시면 되겠습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;저는 백엔드에서 알림톡 발송 API를 받기 때문에 별도로 발송 코드는 작성하지 않았습니다.
프론트단에서 직접 발송할 경우 &lt;strong&gt;등록한 템플릿과 띄어쓰기 줄바꿈 등등 모든 부분이 똑같아야&lt;/strong&gt; 실패하지 않습니다. 이 부분 주의하시기 바랍니다.
백엔드에서 요청하는 경우 이유는 모르겠으나 줄바꿈 적용전 템플릿 코드로 요청을 보냈는데 백엔드단에서 별도의 메세지 형태로 보내니 줄바꿈이 적용되어 메세지가 발송되었습니다.
저희 회사 백엔드 기술 스택은 &lt;code class=&quot;language-text&quot;&gt;python(fastapi)&lt;/code&gt;이니 참고하시기 바랍니다.&lt;/p&gt;
&lt;p&gt;읽어주셔서 감사합니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[눈 떠보니 1년이더라]]></title><description><![CDATA[요즘 나의 상태와 딱 맞는 짤… 오늘이 프론트엔드 개발자로서 일을 시작한지 정확히 1년째 되는 날이다.
블로그 글을 너무 오랫동안 안썼는데 회고록을 쓰면서 다시 한 번 써보자고 다짐해본다.
짧다고 생각하면 짧고 길다고 생각하면 긴…]]></description><link>https://yeongjae-shin.github.io/회고록/눈-떠보니-1년이더라/</link><guid isPermaLink="false">https://yeongjae-shin.github.io/회고록/눈-떠보니-1년이더라/</guid><pubDate>Mon, 13 Sep 2021 21:10:11 GMT</pubDate><content:encoded>&lt;img src=&quot;https://user-images.githubusercontent.com/60685930/133260668-6e1d577c-9325-43d4-859f-40216fa31f6d.jpeg&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;요즘 나의 상태와 딱 맞는 짤…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;오늘이 프론트엔드 개발자로서 일을 시작한지 정확히 1년째 되는 날이다.
블로그 글을 너무 오랫동안 안썼는데 회고록을 쓰면서 다시 한 번 써보자고 다짐해본다.
짧다고 생각하면 짧고 길다고 생각하면 긴 1년인데, 나에게는 너무나 짧은 1년이었다.
그래도 1년이라는 시간동안 많은 것을 배울 수 있었고, 내 인생이 바뀔 수 있는 소중한 시간이었다고 생각한다.
그래서 지난 1년간 뭘 했고 뭘 느꼈는지 적어보고자 한다. 글재주가 없어서 글의 주제가 상당히 두서 없을 예정&lt;/p&gt;
&lt;h1 id=&quot;개발의-시작&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%9C%EB%B0%9C%EC%9D%98-%EC%8B%9C%EC%9E%91&quot; aria-label=&quot;개발의 시작 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;개발의 시작&lt;/h1&gt;
&lt;p&gt;첫 시작은 공무원 필기 합격 후 면접 준비를 하고 있을 때였다. 면접 준비를 하면서 인생을 다시 한 번 뒤돌아 봤는데,
지금까지 살면서 진정으로 내가 해보고 싶었던 것을 한 적은 없는 것 같았다. 더 늙기전에 후회없이 한 번 해보자고 마음먹었고
부모님께 내 생각을 정리해서 말씀드렸다. 당연히 부모님 입장에서는 편하게 갈 수 있는 길을 놔두고 굳이 힘든 길을 선택하냐고 반대를 하셨다.
지금껏 내가 강력하게 뭔가 해보고 싶다라고 말한 적은 없었기에 정확히 1년만 시간을 달라 부탁을 했고 1년안에 취직해서 내려오겠다 선언했다.&lt;/p&gt;
&lt;p&gt;나에게는 1년이라는 시간 밖에 없었고 빠르게 준비할 수 있는 부트캠프를 선택하게 되었다. 혹자는 부트캠프에 대해 안좋은 인식을 가지고 있지만
비전공자였던 내 입장에서는 피할 수 없는 선택이었다고 생각한다. 하지만 모든 일은 자기 하기 나름. 결과적으론 빠르게 개발자로 일을 시작할 수 있었다.
나는 행정학을 전공했지만 디자인에 관심이 많아서 일말의 망설임도 없이 프론트엔드를 선택했다.&lt;/p&gt;
&lt;h1 id=&quot;개발자가-가져야-할-마인드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EA%B0%80%EC%A0%B8%EC%95%BC-%ED%95%A0-%EB%A7%88%EC%9D%B8%EB%93%9C&quot; aria-label=&quot;개발자가 가져야 할 마인드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;개발자가 가져야 할 마인드?&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;절대 남들과 비교하지말자. 느려도 괜찮으니 꾸준히 하자. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;나는 다른 사람들과 함께하는 걸 정말 좋아하는데 부트캠프 특성상 많은 동료들과 함께할 수 있어서 정말 즐겁게 공부했다.
잘 안풀리는 문제가 있어도 동료들과 함께라면 즐겁게 해결할 수 있었고, 그걸 해결해나가는 과정 자체가 재미있는 일이었다.
부트캠프에 있으면서 많이 힘들어하던 동료들을 봤는데 그들의 공통점이 바로 &lt;code class=&quot;language-text&quot;&gt;남들과 비교했을 때 자기 자신의 수준이 떨어져서 스스로를 깎아내리는 것&lt;/code&gt;이었다.&lt;/p&gt;
&lt;p&gt;사실 잘하는 사람들과 비교하는게 잘못된 것은 아니라고 생각한다. 잘하는 사람들을 보면 나도 저렇게 잘하고 싶다라는 동기부여도 되고 내 수준이 어느정도인지의 판단 기준이 되기도 한다.
하지만 문제는 자기 자신을 깎아내리는 일이다. 자기 자신을 깎아내리면서 자존감을 떨어트리면 의욕도 떨어지고 지금 내 수준에서 충분히 해결할 만한 문제도 조금만 안풀리면 쉽게 포기하게 된다.&lt;/p&gt;
&lt;p&gt;누군가 자존감을 높이려면 어떻게 해야하냐고 물어본다면 아마 많은 사람들이 남들과 비교하지말라고 조언할 것이다. 너무 진부한 조언이지만 너무나 당연한 말이기 때문이다.&lt;/p&gt;
&lt;p&gt;다시 한 번 말하지만 &lt;code class=&quot;language-text&quot;&gt;절대 남들과 비교하지말자. 느려도 괜찮으니 꾸준히 하자.&lt;/code&gt; 꽃은 언젠가는 피기 마련이다. 아직 필 시기가 아닐뿐. 나도 언젠가는 정말 원하는 기업에 갈 수 있지 않을까?&lt;/p&gt;
&lt;h1 id=&quot;복지--동료&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B3%B5%EC%A7%80--%EB%8F%99%EB%A3%8C&quot; aria-label=&quot;복지  동료 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;복지 &amp;#x3C; 동료&lt;/h1&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/60685930/133272459-924aaca4-5648-41d5-98a0-6616a84504b7.png&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;복지&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;동료&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;1년간 일하면서 커머스 스타트업, 비IT회사 이렇게 두 군데를 경험했는데 복지가 아무리 좋아도 같이 일하는 사람이 별로면 그 회사는 별로라고 생각이 든다.
이직을 위해 면접을 여러번 보면서 느낀점은 대부분의 회사들이 지원자가 어떤식으로 일을 하고 소통을 하는지 보는 것 같았다.
아무리 실력이 좋아도 독고다이 성격을 가지고 있거나, 불평 불만을 늘어놓거나 등등 협업이 굉장히 중요한 개발자에게 좋지 않은 성격이라면
거르는 것 같다.&lt;/p&gt;
&lt;p&gt;면접을 보러가면 물론 면접관도 지원자 실력과 인성등을 점검하겠지만, 지원자도 회사와 면접관을 평가한다. 특히 나는 면접 볼 때 면접관의 말투와 표정을 유심히 관칠하는데
이게 굉장히 도움이 되는 것 같다. 물론 이게 절대적인 평가 척도가 될 순 없다. 그냥 개인적인 생각일 뿐이다.&lt;/p&gt;
&lt;p&gt;하지만 이건 정답인 것 같다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;최고의 복지는 좋은 동료이다.&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;그래서-1년간-뭘-했나요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B7%B8%EB%9E%98%EC%84%9C-1%EB%85%84%EA%B0%84-%EB%AD%98-%ED%96%88%EB%82%98%EC%9A%94&quot; aria-label=&quot;그래서 1년간 뭘 했나요 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;그래서 1년간 뭘 했나요?&lt;/h1&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/60685930/133629064-5d4b6eff-7753-49b2-8a75-c2400d010194.jpeg&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;최고의 개발 문화를 만들기 위해 고군분투 하는중&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;지난 1년간 참 많은 일이 있었다. 첫 회사는 정말 좋았는데 초기 스타트업 특성 상 불안한 회사 상황에 의해 회사의 백오피스를 개발하다가 끝마치지 못하고 자의 반 타의 반으로 약 5개월만에 퇴사하게 되었다.
첫 회사였던 만큼 애정과 관심을 쏟아 열심히 개발중이었는데 너무나 아쉽고 상심이 컸다. 처음에는 내가 못해서 그런건가 하고 우울감도 매우 컸는데,
후에 당시 대표님과 술을 마시면서 들은 얘기는 회사 상황이 좋지 않아서 그렇다고 너무나 미안해 했다. 그 분과는 아직까지 연락하며 친하게 지내고 있다.&lt;/p&gt;
&lt;p&gt;그렇게 퇴사 후 약 두 달 정도 상실감에 빠져 지내다가 같이 공부하던 동기의 추천으로 지금 회사에 입사하게 되었다. BM 자체는 썩 매력적이지 않아서 고민하던 중이었는데, 동기의 말 한마디가 내 마음을 움직였다.
&lt;code class=&quot;language-text&quot;&gt;개발팀이 막 만들어져서 개발 문화가 없다. 나랑 같이 개발 문화 만들어보자.&lt;/code&gt; 이 말에 입사를 결심하게 되었다. &lt;code class=&quot;language-text&quot;&gt;최고의 복지는 좋은 동료이다&lt;/code&gt; 라는 말을 다시 한 번 실감했다.&lt;/p&gt;
&lt;p&gt;사실 지금 회사가 개발이 중심인 회사가 아니라서 개발자를 모으기 쉽지 않은 것 같다. 그래서 어쩌다보니 신입들 끼리 뭉치게 되었는데, 여기서 사실상 프론트팀의 리드를 맡으면서 현재 일을 하고 있다. 신입들끼리 모여서 하다보니 좌충우돌 시행착오가 정말 많지만 서로 많이 배우고 있다. &lt;del&gt;사수좀 구해주세요 대표님..&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;입사 2일차 부터 큰 프로젝트를 맡아 한달 반 정도 작업하여 지금까지 운영하고 있고, 지금은 &lt;code class=&quot;language-text&quot;&gt;React.js&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;TypeScript&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;styled-components&lt;/code&gt;를 기반으로 사내 디자인 시스템을 개발중이다.&lt;/p&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/60685930/133633832-4dc2fe07-bcbf-4282-9452-755bfcf2d067.png&quot;&gt;
&lt;p&gt;글을 작성중인 현재 0.3.9 버전까지 배포를 완료했고 디자인 시스템을 개발한 덕분에 너무나 편하게 작업하고 있고 동료들에게 고맙다는 말을 들었다.
지금까지 개발하면서 가장 뿌듯하고 기분 좋은 순간이었다. 그 외 코딩 컨벤션 및 커밋 가이드 정립 등등 코드의 품질유지와 원활한 협업을 위해 여러가지로 힘쓰고 있다.
동시다발적으로 프로젝트를 진행해서 많이 힘들긴 하지만 점점 변해가는 개발문화를 보면서 한편으론 &lt;code class=&quot;language-text&quot;&gt;내가 정말 열심히 하고 있구나&lt;/code&gt; 라고 느낀다.&lt;/p&gt;
&lt;p&gt;앞으로 할 프로젝트가 정말 기대되는데 현재 운영중인 모든 서비스 관리를 통합하는 통합 어드민 서비스를 기획중이다. 사실 이 프로젝트는 외부고객이 아닌 내부고객(직원)들을 위해 만드는 것인데, 성공적으로 끝마쳐서 인정받을 수 있으면 좋겠다!&lt;/p&gt;
&lt;p&gt;이상 일기같은 1년차 회고록 끝.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[렌더링 최적화]]></title><description><![CDATA[취업 후 4달만에 쓰는 블로그라니.. 😱 그 동안 바쁘다는 핑계로 너무 소홀했던 것 같다. 매일매일은 아니더라도 꾸준히 글을 써야겠다는 다짐(작심삼일)을 하면서 오랜만에 글을 써본다. 성능 최적화에 대해 설명하기에 앞서 React…]]></description><link>https://yeongjae-shin.github.io/react/렌더링-최적화/</link><guid isPermaLink="false">https://yeongjae-shin.github.io/react/렌더링-최적화/</guid><pubDate>Mon, 13 Sep 2021 20:05:34 GMT</pubDate><content:encoded>&lt;p&gt;취업 후 4달만에 쓰는 블로그라니.. 😱 그 동안 바쁘다는 핑계로 너무 소홀했던 것 같다.&lt;/p&gt;
&lt;p&gt;매일매일은 아니더라도 꾸준히 글을 써야겠다는 다짐(작심삼일)을 하면서 오랜만에 글을 써본다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;성능 최적화에 대해 설명하기에 앞서 React에서 렌더링이 일어나는 이유에 대해 알아야 한다.&lt;/p&gt;
&lt;h1 id=&quot;react에서-렌더링을-실행하는-과정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#react%EC%97%90%EC%84%9C-%EB%A0%8C%EB%8D%94%EB%A7%81%EC%9D%84-%EC%8B%A4%ED%96%89%ED%95%98%EB%8A%94-%EA%B3%BC%EC%A0%95&quot; aria-label=&quot;react에서 렌더링을 실행하는 과정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;React에서 렌더링을 실행하는 과정&lt;/h1&gt;
&lt;p&gt;React에서 렌더링을 수행하는 시점은 다음과 같다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Props의 변화가 일어났을 때&lt;/li&gt;
&lt;li&gt;State의 변화가 일어났을 때&lt;/li&gt;
&lt;li&gt;forceUpdate()를 실행했을 때&lt;/li&gt;
&lt;li&gt;부모 컴포넌트가 렌더링되었을 때&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;1 ~ 3의 과정을 통해 컴포넌트가 렌더링이 될 때, 자식 컴포넌트 또한 같은 과정으로 렌더링이 진행된다.&lt;/p&gt;
&lt;p&gt;하지만 컴포넌트에서 렌더링 결과에 전혀 영향을 미치지 않는 변화가 일어나면 불필요한 렌더링이 발생하게 되고, 이는 앱의 성능에 악영향을 끼치게 된다.&lt;/p&gt;
&lt;p&gt;렌더링 과정에서 수행하는 로직이 많을수록, 많은 컴포넌트를 출력할 수록 손실은 더욱 커지게 된다.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;그래서-스타일링과-무슨-상관이-있나요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B7%B8%EB%9E%98%EC%84%9C-%EC%8A%A4%ED%83%80%EC%9D%BC%EB%A7%81%EA%B3%BC-%EB%AC%B4%EC%8A%A8-%EC%83%81%EA%B4%80%EC%9D%B4-%EC%9E%88%EB%82%98%EC%9A%94&quot; aria-label=&quot;그래서 스타일링과 무슨 상관이 있나요 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;그래서 스타일링과 무슨 상관이 있나요?&lt;/h1&gt;
&lt;p&gt;이번에 설명하고자 하는 스타일링과 관련한 성능 최적화와 렌더링은 무슨 상관이 있을까?&lt;/p&gt;
&lt;p&gt;간단한 예시를 들어보겠다.&lt;/p&gt;
&lt;p&gt;우리가 스타일링을 할 때 어쩔수 없이 인라인 스타일로 스타일링을 할 때가 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 예시&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; backgroundColor&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;#fff&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;버튼&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; Button&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이런식으로 말이다.&lt;/p&gt;
&lt;p&gt;앱이 렌더링이 되면서 코드를 읽어 내려가는데, 객체의 메모리 주소값은 항상 다르기 때문에 가상 DOM에 변화가 일어났다고 인식해서 불필요한 리렌더링이 발생하게 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그렇다면 어떤식으로 스타일링을 해야 불필요한 리렌더링을 방지할 수 있을까?&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;1-styled-components-활용하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-styled-components-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;1 styled components 활용하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. styled-components 활용하기&lt;/h2&gt;
&lt;p&gt;모든 회사에 웹디자이너 혹은 웹퍼블리셔가 있지는 않기 때문에 직접 UI를 구성하고 개발하는 경우가 많이 있다.&lt;/p&gt;
&lt;p&gt;그래서 나 같이 미적감각이 전무한 사람들은 잘 만들어진 UI 라이브러리를 많이 사용하게 된다.&lt;/p&gt;
&lt;p&gt;그러나 잘 만들어진 UI 라이브러리를 사용하게 되면 디자인들이 획일화되기도 하고, 회사가 원하는 바와 다르게 나올수 있기 때문에 직접 커스텀을 해서 사용하게 된다.&lt;/p&gt;
&lt;p&gt;보통 커스텀을 하게 된다면 인라인 스타일로 원래 있는 CSS 속성을 덮어쓰게 되는데 이렇게 되면 위에서 적은 불필요한 리렌더링이 발생하게 된다.&lt;/p&gt;
&lt;p&gt;그렇다면 UI 라이브러리를 사용하면서 성능 최적화와 커스텀 두 마리의 토끼를 잡을 수 있을까?&lt;/p&gt;
&lt;p&gt;물론 CSS 파일을 만들어 클래스명을 가져와 덮어씌우는 방법도 있지만 그리 힙한 방법은 아니다.&lt;/p&gt;
&lt;p&gt;우리에게는 힙한 &lt;code class=&quot;language-text&quot;&gt;styled-components&lt;/code&gt;가 있지 않은가? &lt;del&gt;물론 요즘은 &lt;code class=&quot;language-text&quot;&gt;emotion&lt;/code&gt;이 핫한 것 같지만…&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;어쨌든 &lt;code class=&quot;language-text&quot;&gt;styled-components&lt;/code&gt;를 활용해 성능 최적화를 할 수가 있다.&lt;/p&gt;
&lt;p&gt;예시는 요즘 내가 사용하는 &lt;code class=&quot;language-text&quot;&gt;Ant-design&lt;/code&gt;을 예시로 들어보겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 인라인 스타일 예시&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Button &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;antd&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;LoginForm&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Button type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;submit&quot;&lt;/span&gt; style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; marginTop&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;10px&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      로그인
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; LoginForm&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;인라인 스타일을 사용하게 되면 코드도 깔끔하지 않을 뿐더러, 아무런 변화가 없지만 불필요한 리렌더링을 발생시킨다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// styled-components 예시&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; styled &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;styled-components&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Button &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;antd&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; LoginBtn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;styled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Button&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
  margin-top: 10px;
&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;LoginForm&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;LoginBtn type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;submit&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;로그인&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;LoginBtn&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; LoginForm&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 UI 라이브러리의 모듈을 &lt;code class=&quot;language-text&quot;&gt;styled-components&lt;/code&gt;를 활용하여 인라인 스타일을 사용하지 않고 쉽게 커스텀을 할 수가 있다.&lt;/p&gt;
&lt;h2 id=&quot;2-usememo-활용하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-usememo-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;2 usememo 활용하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. useMemo 활용하기&lt;/h2&gt;
&lt;p&gt;React Hook 중에 &lt;code class=&quot;language-text&quot;&gt;useMemo&lt;/code&gt;라는 것이 있다. Memo는 &lt;code class=&quot;language-text&quot;&gt;memoized&lt;/code&gt;를 의미하는데, 이는 이전에 한 번 사용한 값을 재사용한다는 의미를 가지고 있다.&lt;/p&gt;
&lt;p&gt;그렇다면 &lt;code class=&quot;language-text&quot;&gt;useMemo&lt;/code&gt;를 이용해서 어떻게 불필요한 리렌더링을 방지할 수 있을까?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; useMemo &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Button &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;antd&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;LoginForm&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; btnStyle &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useMemo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; marginTop&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;10px&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Button style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;btnStyle&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;로그인&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; LoginForm&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 Hook을 이용하여 필요한 스타일 객체를 캐싱해놓고 재사용을 하게 된다면 이미 기억하고 있는 객체이기 때문에 메모리주소값이 변하지 않아 불필요한 리렌더링이 발생하지 않게 된다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;틀린 점이나 궁금한 점이 있으시면 댓글 달아주세요!&lt;/p&gt;
&lt;p&gt;읽어주셔서 감사합니다 🙇‍♂️&lt;/p&gt;</content:encoded></item><item><title><![CDATA[블로그를 이사했습니다!]]></title><description><![CDATA[블로그를 이사했습니다! 개발자가 된지 1년차가 된 기념으로 깃헙 블로그로 이사했습니다. 이전에 막 썼던 글들은 아쉽지만… 뒤로 한 채 앞으로 양질의 글을 쓸 수 있도록 노력해보겠습니다. 감사합니다 🙇‍♂️]]></description><link>https://yeongjae-shin.github.io/기타/블로그를-이사했습니다!/</link><guid isPermaLink="false">https://yeongjae-shin.github.io/기타/블로그를-이사했습니다!/</guid><pubDate>Mon, 13 Sep 2021 19:50:11 GMT</pubDate><content:encoded>&lt;h1 id=&quot;블로그를-이사했습니다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B8%94%EB%A1%9C%EA%B7%B8%EB%A5%BC-%EC%9D%B4%EC%82%AC%ED%96%88%EC%8A%B5%EB%8B%88%EB%8B%A4&quot; aria-label=&quot;블로그를 이사했습니다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;블로그를 이사했습니다!&lt;/h1&gt;
&lt;p&gt;개발자가 된지 1년차가 된 기념으로 깃헙 블로그로 이사했습니다.&lt;/p&gt;
&lt;p&gt;이전에 막 썼던 글들은 아쉽지만… 뒤로 한 채 앞으로 양질의 글을 쓸 수 있도록 노력해보겠습니다.&lt;/p&gt;
&lt;p&gt;감사합니다 🙇‍♂️&lt;/p&gt;</content:encoded></item><item><title><![CDATA[about]]></title><description><![CDATA[Your name Thank you for reading my resume. If you want to contact me, Please send me an email.]]></description><link>https://yeongjae-shin.github.io/resume-en/</link><guid isPermaLink="false">https://yeongjae-shin.github.io/resume-en/</guid><pubDate>Sun, 27 Jan 2019 16:21:13 GMT</pubDate><content:encoded>&lt;h1 id=&quot;your-name&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#your-name&quot; aria-label=&quot;your name permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Your name&lt;/h1&gt;
&lt;div align=&quot;center&quot;&gt;
&lt;p&gt;&lt;em&gt;Thank you for reading my resume. If you want to contact me, Please send me an email.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;</content:encoded></item></channel></rss>